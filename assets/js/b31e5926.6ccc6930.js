"use strict";(self.webpackChunkautomaly_test=self.webpackChunkautomaly_test||[]).push([[8962],{1260:e=>{e.exports=JSON.parse('{"tag":{"label":"Exception Handling","permalink":"/tags/exception-handling","allTagsPath":"/tags","count":1,"items":[{"id":"development/xpp-sample/2017-08-07-Exception-Handling-in-Dynamics-365-For-Finance-and-Operation/index","title":"Exception Handling in Dynamics 365 For Finance and Operation","description":"When we write a code, or make a customization to Dynamics 365 For Operation which is using X++ should make use of Exception Handling to provide some context for the message or a different more useful message. In this article, I will be exploring how I can come up with a uniform way to catch multiple types of exception that can be raised in X++.","permalink":"/development/xpp-sample/2017-08-07-Exception-Handling-in-Dynamics-365-For-Finance-and-Operation/"}],"unlisted":false}}')}}]);