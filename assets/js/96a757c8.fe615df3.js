"use strict";(self.webpackChunknuxulutest=self.webpackChunknuxulutest||[]).push([[571],{59014:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var o=t(74848),l=t(28453);const a={date:"2021-12-23",title:"File upload sysoperation",categories:["X++","sysoperation"],tags:["File upload"],authors:"max",unlisted:!0},r=void 0,i={permalink:"/2021/12/23/File-upload-sysoperation",source:"@site/blog/2021-12-23-File-upload-sysoperation/index.md",title:"File upload sysoperation",description:"",date:"2021-12-23T00:00:00.000Z",tags:[{inline:!0,label:"File upload",permalink:"/tags/file-upload"}],readingTime:2.3366666666666664,hasTruncateMarker:!1,authors:[{name:"Max Nguyen",title:"FinOps Ranger",url:"/about",imageURL:"https://github.com/Dynamics365.png",key:"max",page:null}],frontMatter:{date:"2021-12-23",title:"File upload sysoperation",categories:["X++","sysoperation"],tags:["File upload"],authors:"max",unlisted:!0},unlisted:!0,lastUpdatedAt:17035003e5,lastUpdatedBy:"Dynamics365"},s={authorsImageUrls:[void 0]},d=[];function u(e){const n={code:"code",pre:"pre",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",metastring:'showLineNumbers title="DEV_FileUploadController.xpp"',children:'class DEV_FileUploadController extends SysOperationServiceController\n{\n    public void new()\n    {\n        super();\n     \n        this.parmClassName(classStr(DEV_FileUploadService));\n        this.parmMethodName(methodStr(DEV_FileUploadService, processOperation));\n     \n        this.parmDialogCaption("Caption");\n    }\n    public ClassDescription caption()\n    {\n        return "Caption";\n    }\n    public static void main(Args args)\n    {\n\t\tnew DEV_FileUploadController().startOperation();\n    }\n}\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",metastring:'showLineNumbers title="DEV_FileUploadContract.xpp"',children:"[DataContract,\nSysOperationContractProcessing(classStr(DEV_FileUploadUIBuilder))\n]\nclass DEV_FileUploadContract\n{\n    container       storageResult;\n\n    [DataMemberAttribute('StorageResult')]\n    public container parmStorageResult(container _storageResult =  storageResult)\n    {\n        storageResult = _storageResult;\n        return storageResult;\n    }\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",metastring:'showLineNumbers title="DEV_FileUploadUIBuilder.xpp"',children:'class DEV_FileUploadUIBuilder extends SysOperationUIBuilder\n{\n    const str           OkButtonName = \'CommandButton\';\n    const str           FileUploadName = \'FileUpload\';\n\t\n    DEV_FileUploadContract   contract;\n\n    public void postBuild()\n    {\n        DialogGroup      dialogGroup;\n        FormBuildControl formBuildControl;\n        FileUploadBuild  dialogFileUpload;\n\n        super();\n\n        contract = this.dataContractObject();\n        \n        dialogGroup = dialog.addGroup("File path");\n        formBuildControl = dialog.formBuildDesign().control(dialogGroup.name());\n       \n        dialogFileUpload = formBuildControl.addControlEx(classstr(FileUpload), FileUploadName);\n        dialogFileUpload.style(FileUploadStyle::MinimalWithFilename);\n        dialogFileUpload.baseFileUploadStrategyClassName(classstr(FileUploadTemporaryStorageStrategy));\n        dialogFileUpload.fileTypesAccepted(".csv");\n\t//dialogFileUpload.fileTypesAccepted(".xlsx");\n        dialogFileUpload.fileNameLabel("@SYS308842");\n    }\n\n    private void dialogEventsSubscribe(FormRun _formRun)\n    {\n        FileUpload fileUpload = _formRun.control(_formRun.controlId(FileUploadName));\n\t\t\n        fileUpload.notifyUploadCompleted += eventhandler(this.uploadCompleted);\n        fileUpload.notifyUploadAttemptStarted += eventhandler(this.uploadStarted);\n\t\t\n        _formRun.onClosing += eventhandler(this.dialogClosing);\n    }\n\t\n    private void dialogClosing(xFormRun sender, FormEventArgs e)\n    {\n        this.dialogEventsUnsubscribe(sender as FormRun);\n    }\n\t\n\n    private void dialogEventsUnsubscribe(FormRun _formRun)\n    {\n        FileUpload fileUpload = _formRun.control(_formRun.controlId(FileUploadName));\n        fileUpload.notifyUploadCompleted -= eventhandler(this.uploadCompleted);\n        fileUpload.notifyUploadAttemptStarted -= eventhandler(this.uploadStarted);\n\t\t\n        _formRun.onClosing -= eventhandler(this.dialogClosing);\n    }\n\t\n    protected void uploadCompleted()\n    {\n        var  \t\tformRun \t = this.dialog().dialogForm().formRun();\n        FileUpload  \tfileUpload \t = formRun.control(formRun.controlId(FileUploadName));\n        FileUploadTemporaryStorageResult \tuploadResult     = fileUpload.getFileUploadResult();\n\n        if (uploadResult != null && uploadResult.getUploadStatus())\n        {\n            contract.parmStorageResult(uploadResult.pack());\n        }\n\n        this.setDialogOkButtonEnabled(formRun, true);\n    }\n\t\n    private void uploadStarted()\n    {\n        var formRun = this.dialog().dialogForm().formRun();\n\t\t\n        this.setDialogOkButtonEnabled(formRun, false);\n    }\n\n    protected void setDialogOkButtonEnabled(FormRun _formRun, boolean _isEnabled)\n    {\n        FormControl okButtonControl = _formRun.control(_formRun.controlId(OkButtonName));\n        if (okButtonControl)\n        {\n            okButtonControl.enabled(_isEnabled);\n        }\n    }\n\n    public void postRun()\n    {\n        super();\n\n        FormRun formRun = this.dialog().dialogForm().formRun();\n        this.dialogEventsSubscribe(formRun);\n\n        this.setDialogOkButtonEnabled(formRun, false);\n    }\n}\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",metastring:'showLineNumbers title="DEV_FileUploadService.xpp"',children:'using System.IO;\nusing OfficeOpenXml;\nusing OfficeOpenXml.ExcelPackage;\nusing OfficeOpenXml.ExcelRange;\nclass DEV_FileUploadService extends SysOperationServiceBase\n{\n    #File\n    container               currentLine;\n    CommaTextStreamIo       cSVStream;\n    System.IO.Stream        stream;\n    ExcelSpreadsheetName    sheeet;\n    System.Exception        ex;\n\n    public void processOperation(DEV_FileUploadContract _contract)\n    {\n        if (_contract.parmStorageResult() != conNull())\n        {\n            FileUploadTemporaryStorageResult fileUploadResult = new FileUploadTemporaryStorageResult();\n\n            fileUploadResult.unpack(_contract.parmStorageResult());\n\n            if (fileUploadResult != null && fileUploadResult.getUploadStatus())\n            {\n                try \n                {\n                    cSVStream = CommaTextStreamIo::constructForRead(File::UseFileFromURL(fileUploadResult.getDownloadUrl()));\n                    if (cSVStream.status() != IO_Status::Ok)\n                    {\n                        throw error(strfmt(\'Is not possible to open the file. Error %1\',enum2str(cSVStream.status())));\n                    }\n                    cSVStream.inFieldDelimiter("\\,");\n                    cSVStream.inRecordDelimiter("\\n");\n   \n                    currentLine = cSVStream.read();\n   \n                    while(currentLine)\n                    {\n                        str  id = conPeek(currentLine, 1);\n                        info(id);\n                        currentLine = cSVStream.read();\n                    }\n                \n                    stream = fileUploadResult.openResult();\n                    using (ExcelPackage Package = new ExcelPackage(stream))\n                    {\n                        int                         rowCount, i;\n                        Package.Load(stream);\n  \n                        ExcelWorksheet worksheet   = package.get_Workbook().get_Worksheets().get_Item(1);\n                        OfficeOpenXml.ExcelRange    range \t= worksheet.Cells;\n                        rowCount                    = worksheet.Dimension.End.Row - worksheet.Dimension.Start.Row + 1;\n\n                        for (i = 2; i<= rowCount; i++)\n                        {\n                            str custAccount     = range.get_Item(i, 1).value;\n                            str id     \t\t= range.get_Item(i, 2).value;\n                            int number    \t= range.get_Item(i, 3).value;\n                            TranDate      date      \t= range.get_Item(i, 4).value;\n                        }\n                    }\n                }\n                catch \n                {\n                    ex = CLRInterop::getLastException().GetBaseException();\n\n                    error(ex.get_Message());\n                }\n            }\n        }         \n    }\n}\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",metastring:'showLineNumbers title="DEV_FileUpload_Runbase.xpp"',children:"class DEV_FileUpload_Runbase extends RunBaseBatch\n{\n    Filename        filename;\n    dialog          dialog;\n\n    #define.CurrentVersion(1)\n    #define.Version1(1)\n    #localmacro.CurrentList\n        fileName\n    #endmacro\n\n    client server static ClassDescription description()\n    {\n        return 'Upload CSV file'; // or Excel file\n    }\n\n    protected boolean canRunInNewSession()\n    {\n        return false;\n    }\n\n\n    public Object dialog()\n    {\n        DialogGroup         dialogGroup;\n        FormBuildControl    formBuildControl;\n        FileUploadBuild     dialogFileUpload;\n       // Set              enumSet = new Set(Types::Enum);\n                \n        dialog              = super();\n        dialogGroup         = dialog.addGroup('File picker');\n        formBuildControl    = dialog.formBuildDesign().control(dialogGroup.name());\n        \n        dialogFileUpload = formBuildControl.addControlEx(classstr(FileUpload), filename);\n        dialogFileUpload.style(FileUploadStyle::MinimalWithFilename);\n        dialogFileUpload.baseFileUploadStrategyClassName(classstr(FileUploadTemporaryStorageStrategy));\n        dialogFileUpload.fileTypesAccepted('.csv');\n        //dialogFileUpload.fileTypesAccepted('.xlsx');\n\n        dialogFileUpload.fileNameLabel('Select worker data file');\n    \n        return dialog;\n    }\n\n    static void main(Args _args)\n    {\n        MyBatch objClass = new MyBatch();\n\n        if (objClass.prompt())\n        {\n            objClass.runOperation();\n        }\n    }\n\n    public void run()\n    {\n        #File\n        container                           currentLine;\n        CommaTextStreamIo                   localStream;\n        str                                 textFile;\n       \n        FileUpload fileUploadControl = this.getFormControl(dialog, filename);\n        \n        FileUploadTemporaryStorageResult fileUploadResult = fileUploadControl.getFileUploadResult();\n\n        // CSV file\n        if (fileUploadResult != null && fileUploadResult.getUploadStatus())\n        {\n            textFile = fileUploadResult.getDownloadUrl();\n        }\n        \n        localStream = CommaTextStreamIo::constructForRead(File::UseFileFromURL(textFile));\n       \n          \n        if (localStream.status() != IO_Status::Ok)\n        {\n            throw error(strfmt('Is not possible to open the file. Error %1',enum2str(localStream.status())));\n        }\n    \n        localStream.inFieldDelimiter(',');\n        while (localStream.status() ==  IO_Status::Ok)\n        {\n            currentLine = localStream.read();\n\n            if (!currentLine)\n            {\n                break;\n            }\n            try\n            {\n                Id    = conPeek(currentLine, 1);\n                Date  = conPeek(currentLine, 2);\n\t\t\t\t// Remaining fields             \n            }\n            catch (Exception::Error)\n            {\n                Throw (Exception::Error);\n            }\n        }\n\n        // Excel file\n        \n        stream = fileUploadResult.openResult();\t\t\t\t\n       using (ExcelPackage Package = new ExcelPackage(stream))\n       {\n           int                         rowCount, i;\n           Package.Load(stream);\n\t\t\t\t\t\t\n           ExcelWorksheet  \t       worksheet   = package.get_Workbook().get_Worksheets().get_Item(1);\n           OfficeOpenXml.ExcelRange    range \t   = worksheet.Cells;\n           rowCount                    = worksheet.Dimension.End.Row - worksheet.Dimension.Start.Row + 1;\n\n           for (i = 2; i<= rowCount; i++)\n           {\n               str\t\t\tcustAccount     = range.get_Item(i, 1).value;\n               str\t\t\tid     \t\t= range.get_Item(i, 2).value;\n               int\t\t\tnumber    \t= range.get_Item(i, 3).value;\n               TranDate   \t        date      \t= range.get_Item(i, 4).value;\n\t    }\n    }\n\n        info('Success');\n    }\n\n    protected FormControl getFormControl(DialogRunbase dialog, str controlName)\n    {\n        return dialog.formRun().control(_dialog.formRun().controlId( controlName));\n    }\n\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",metastring:'showLineNumbers title="Runable_Class.xpp"',children:"AsciiStreamIo file;\nArray fileLines;\nFileUploadTemporaryStorageResult fileUpload;\nfileUpload = File::GetFileFromUser() as FileUploadTemporaryStorageResult;\nfile = AsciiStreamIo::constructForRead(fileUpload.openResult());\n\nif (file)\n{\n    if (file.status())\n    {\n        throw error(\"@SYS52680\");\n    }\n\n    file.inFieldDelimiter(',');\n    file.inRecordDelimiter('\\r\\n');\n}\n\ncontainer record;\nwhile (!file.status())\n{\n    record = file.read();\n    if (conLen(record))\n    {\n        info(strFmt(\"%1 - %2\",conPeek(record,1),conPeek(record,2)));\n    }\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var o=t(96540);const l={},a=o.createContext(l);function r(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);