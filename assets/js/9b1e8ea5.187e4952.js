"use strict";(self.webpackChunkautomaly_com=self.webpackChunkautomaly_com||[]).push([[8841],{92441:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var r=n(85893),i=n(11151);const o={date:"2022-10-29",title:"Electronic Reporting (GER) from scratch part 2 Export an XML",categories:["Electronic Reporting","X++"],tags:["Electronic Reporting"],authors:"max",unlisted:!0,last_update:{date:"12/12/2023",author:"max"}},s=void 0,a={id:"development/business-docs/ger/2022-10-29-Electronic-Reporting-from-scratch-part-2-Export-an-XML/index",title:"Electronic Reporting (GER) from scratch part 2 Export an XML",description:"In this Post we are going to see the step by step of how to configure everything needed for the export process to an XML file of the D365F&O tables data without writing a single line of code, using GER (Electronic Reporting). Note that this post and video are the second of the _Electronic Reporting from scratch_ series, but they can be followed independently, however, I recommend you to check first the First Part (importing a text file)",source:"@site/docs/03-development/02-business-docs/02-ger/2022-10-29-Electronic-Reporting-from-scratch-part-2-Export-an-XML/index.md",sourceDirName:"03-development/02-business-docs/02-ger/2022-10-29-Electronic-Reporting-from-scratch-part-2-Export-an-XML",slug:"/development/business-docs/ger/2022-10-29-Electronic-Reporting-from-scratch-part-2-Export-an-XML/",permalink:"/development/business-docs/ger/2022-10-29-Electronic-Reporting-from-scratch-part-2-Export-an-XML/",draft:!1,unlisted:!0,tags:[{label:"Electronic Reporting",permalink:"/tags/electronic-reporting"}],version:"current",frontMatter:{date:"2022-10-29",title:"Electronic Reporting (GER) from scratch part 2 Export an XML",categories:["Electronic Reporting","X++"],tags:["Electronic Reporting"],authors:"max",unlisted:!0,last_update:{date:"12/12/2023",author:"max"}},sidebar:"tutorialSidebar"},d={},c=[{value:"The Requirement",id:"the-requirement",level:2},{value:"The Electronic Reporting (GER) Export flow Overview",id:"the-electronic-reporting-ger-export-flow-overview",level:2},{value:"Step 1: Create the Data Model.",id:"step-1-create-the-data-model",level:2},{value:"Step 2: Create the Datasource to Model mapping.",id:"step-2-create-the-datasource-to-model-mapping",level:2},{value:"Step 3: Create the Format And the Mapping with the model.",id:"step-3-create-the-format-and-the-mapping-with-the-model",level:2},{value:"Step 4: The Glory!",id:"step-4-the-glory",level:2}];function h(e){const t={a:"a",code:"code",em:"em",h2:"h2",img:"img",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["In this Post we are going to see the step by step of how to configure everything needed for the ",(0,r.jsx)(t.strong,{children:"export"})," process to an ",(0,r.jsx)(t.strong,{children:"XML"})," file of the ",(0,r.jsx)(t.strong,{children:"D365F&O"})," tables data without writing a single line of code, using ",(0,r.jsx)(t.strong,{children:"GER (Electronic Reporting)"}),". Note that this post and video are the second of the ",(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.em,{children:"Electronic Reporting from scratch"})})," series, but they can be followed independently, however, I recommend you to check first the First Part (importing a text file)"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.a,{href:"https://www.youtube.com/watch?v=z8C43loE8O4&list=PL96hp9Q2HCy9OlJBM0YK6t6V5MUpS7DYp&index=2",children:"D365FO Electronic Reporting (GER) From Scratch part 2: Export an XML file YouTube video"})})})}),"\n",(0,r.jsx)(t.p,{children:"But, as I always like to do, this is not an empty post-link to the video, this is a shortcut version for lazy/hurried professionals. Well, actually here you are the different steps as a complement to the video, so you don\u2019t have to go back and forward if you want to follow the post as a guide. The info here in the post might not be completed without the video, so if you have any doubt in a step, go and check the part of the video related with the one in the post, I put links in every step title, which will get you to the related part in the YouTube video, hope you enjoy it!"}),"\n",(0,r.jsx)(t.h2,{id:"the-requirement",children:"The Requirement"}),"\n",(0,r.jsxs)(t.p,{children:["We want to export the information of our header and lines ",(0,r.jsx)(t.strong,{children:"D365FO"})," tables in Xml format using ",(0,r.jsx)(t.strong,{children:"Electronic Reporting (GER)"}),"."]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:n(12562).Z+"",width:"861",height:"427"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"D365FO Tables to import"})}),"\n",(0,r.jsx)(t.h2,{id:"the-electronic-reporting-ger-export-flow-overview",children:"The Electronic Reporting (GER) Export flow Overview"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:n(23596).Z+"",width:"915",height:"384"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"GER export flow overview"})}),"\n",(0,r.jsx)(t.p,{children:"The Data Model (DM) will be our \u201cData contract\u201d, I.E: the structure with the critical data we want to write in our XML. This information will be fulfilled by the Model Mapping to Model, who will query the tables and map them with the DM. Once the DM is populated it will, through the mapping between model and format, write the information into the actual XML. So the step by step would be:"}),"\n",(0,r.jsx)(t.h2,{id:"step-1-create-the-data-model",children:"Step 1: Create the Data Model."}),"\n",(0,r.jsx)(t.p,{children:"We are going to create a simple Data Model, in the Electronic Reporting workspace:"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:n(59427).Z+"",width:"1024",height:"576"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Electronic Reporting main form"})}),"\n",(0,r.jsx)(t.p,{children:"Click on Reporting Configurations, and create a new Root, that will be our Model."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:n(34309).Z+"",width:"1024",height:"576"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Create new model"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:n(31883).Z+"",width:"1024",height:"576"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Go to Designer"})}),"\n",(0,r.jsxs)(t.p,{children:["And create the diferents nodes until you have a data model like in the following image, having the Model Root (",(0,r.jsx)(t.strong,{children:"Model"}),"), Header and Lines (",(0,r.jsx)(t.strong,{children:"Record list"}),"), and the Strings and Integer fields."]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:n(78889).Z+"",width:"1024",height:"576"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Create the nodes of your model"})}),"\n",(0,r.jsx)(t.h2,{id:"step-2-create-the-datasource-to-model-mapping",children:"Step 2: Create the Datasource to Model mapping."}),"\n",(0,r.jsx)(t.p,{children:"After finishing the Model structure, click on Map model to datasource, and create a new mapping, filling the mandatory fields and setting the direction To Model, because the information goes from the tables to the model:"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:n(5747).Z+"",width:"1024",height:"576"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Create a map between the D365FO Tables and your model"})}),"\n",(0,r.jsx)(t.p,{children:"Click on designer, and we add root, selecting Table records from the first column, to add the tables we want to get the data from."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:n(51928).Z+"",width:"1024",height:"576"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Add the table records"})}),"\n",(0,r.jsxs)(t.p,{children:["Now we have the tables as data sources, but no relation between them. (With ",(0,r.jsx)(t.strong,{children:"FK relations"}),", under the Header data source, surfing in the ",(0,r.jsx)(t.strong,{children:"Relations"})," we would find the lines table and we could use it directly). In this case we will need to ",(0,r.jsx)(t.strong,{children:"filter"})," the lines somehow, so the solution I made is to add a ",(0,r.jsx)(t.strong,{children:"calculated field"})," in the ",(0,r.jsx)(t.strong,{children:"Header Data Source"})," which will filter the data of the lines table using the Id of the record of the header."]}),"\n",(0,r.jsxs)(t.p,{children:["First adding the ",(0,r.jsx)(t.strong,{children:"calculated field"})," under/inside Header level."]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:n(23256).Z+"",width:"1024",height:"576"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Add the calculated field"})}),"\n",(0,r.jsxs)(t.p,{children:["And editing the formula to put ",(0,r.jsx)(t.em,{children:"WHERE(Lines, Lines.HeaderId = @.Id)"}),"."]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:n(5284).Z+"",width:"1024",height:"576"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Edit the Calculated Field formula"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Save"}),", go back to the previous form ",(0,r.jsx)(t.strong,{children:"and"})," ",(0,r.jsx)(t.strong,{children:"complete"})," the data model there."]}),"\n",(0,r.jsx)(t.h2,{id:"step-3-create-the-format-and-the-mapping-with-the-model",children:"Step 3: Create the Format And the Mapping with the model."}),"\n",(0,r.jsxs)(t.p,{children:["It\u2019s time to give some format to our Data. Create a ",(0,r.jsx)(t.strong,{children:"format"}),", based on the recently created and completed model and set type to ",(0,r.jsx)(t.strong,{children:"XML"}),":"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:n(74330).Z+"",width:"1024",height:"576"})}),"\n",(0,r.jsx)(t.p,{children:"Go to the Designer and create a format with this structure:"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:n(3903).Z+"",width:"1024",height:"576"})}),"\n",(0,r.jsxs)(t.p,{children:["Note that ",(0,r.jsx)(t.strong,{children:"we\u2019ve mapped"})," it already ",(0,r.jsx)(t.strong,{children:"inside"})," the format designer. As we saw in the previous post, that could be done by creating a different ",(0,r.jsx)(t.strong,{children:"Format to model mapping"}),", but it is convenient for you to know both ways, because ",(0,r.jsx)(t.strong,{children:"standard"})," uses the two of them for its ",(0,r.jsx)(t.strong,{children:"GERs"}),". The map is direct, following the image above, but if you have problems with it, go and check the part of the video that goes through it."]}),"\n",(0,r.jsxs)(t.p,{children:["We only have to ",(0,r.jsx)(t.strong,{children:"save"})," now, ",(0,r.jsx)(t.strong,{children:"complete"})," and ",(0,r.jsx)(t.strong,{children:"Run"})," our format! It will use the ",(0,r.jsx)(t.strong,{children:"model"})," and the ",(0,r.jsx)(t.strong,{children:"mappings"})," that we\u2019ve created automatically, as there\u2019s only one of each type."]}),"\n",(0,r.jsx)(t.h2,{id:"step-4-the-glory",children:"Step 4: The Glory!"}),"\n",(0,r.jsxs)(t.p,{children:["If there are no errors, a file should be generated with an ",(0,r.jsx)(t.strong,{children:"XML"})," like this"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-xml",children:'<?xml version="1.0" encoding="utf-8"?>\r\n<XMLRoot>\r\n  <Headers>\r\n    <HeaderRecords>\r\n      <ID>01</ID>\r\n      <Name>Header 1</Name>\r\n      <Lines>\r\n        <LineRecord>\r\n          <LineStr>line 01</LineStr>\r\n          <LineInt>1</LineInt>\r\n        </LineRecord>\r\n        <LineRecord>\r\n          <LineStr>line02</LineStr>\r\n          <LineInt>2</LineInt>\r\n        </LineRecord>\r\n        <LineRecord>\r\n          <LineStr>line   03</LineStr>\r\n          <LineInt>3</LineInt>\r\n        </LineRecord>\r\n      </Lines>\r\n    </HeaderRecords>\r\n    <HeaderRecords>\r\n      <ID>02</ID>\r\n      <Name>Header 2</Name>\r\n      <Lines>\r\n        <LineRecord>\r\n          <LineStr>line 01</LineStr>\r\n          <LineInt>1</LineInt>\r\n        </LineRecord>\r\n        <LineRecord>\r\n          <LineStr>line04</LineStr>\r\n          <LineInt>4</LineInt>\r\n        </LineRecord>\r\n      </Lines>\r\n    </HeaderRecords>\r\n  </Headers>\r\n</XMLRoot>\n'})})]})}function l(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},59427:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/create-model-1-bdcd2ee70e04905815bcfa2b255f948e.png"},23596:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/ger-main-data-flow-79d21225078ca8f7d4a06795041e5b49.jpg"},12562:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/image-18-4ea224dbdcaf363ac9e68ca2286affbe.png"},34309:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/image1-3-d4e7bda938de651e5240bf9dc9b53eb9.png"},31883:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/image2-3-d7d222ff5a44c57c7ecbf760936028c2.png"},78889:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/image3-3-c3db8d2fd4f0ca155c84c46477d06be2.png"},5747:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/image4-1-9a37f6e85a719a12f7b6d9e14414449e.png"},51928:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/image5-1-65715a0d648209aaa7f889e08704a46b.png"},23256:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/image6-1-837a63bfe683d22aa4c453d55bedfd4a.png"},5284:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/image7-1-8022cbefdd5476824a18b0bb1cb99c71.png"},74330:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/image8-1-1d41691ccd95b4a236a250d93c37d15e.png"},3903:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/image9-1-5e9a1a9f30f9dcc8abce523499bb8c73.png"},11151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>s});var r=n(67294);const i={},o=r.createContext(i);function s(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);