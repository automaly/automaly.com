"use strict";(self.webpackChunkautomaly_test=self.webpackChunkautomaly_test||[]).push([[8130],{77735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/2024/05/11/truncate-a-table-Xpp","metadata":{"permalink":"/blog/2024/05/11/truncate-a-table-Xpp","source":"@site/blog/2024-05-11-truncate-a-table-Xpp.mdx","title":"Truncate a table using X++","description":"We can use the tableTruncate method from SqlDataDictionary to truncate a table in FinOps, useful for a huge SQL table.","date":"2024-05-11T00:00:00.000Z","tags":[{"inline":true,"label":"xpp","permalink":"/blog/tags/xpp"},{"inline":true,"label":"Development","permalink":"/blog/tags/development"}],"readingTime":0.19666666666666666,"hasTruncateMarker":false,"authors":[{"name":"Max Nguyen","title":"FinOps Ranger","url":"/about","imageURL":"https://github.com/Dynamics365.png","key":"max"}],"frontMatter":{"date":"2024-05-11","title":"Truncate a table using X++","categories":["xpp"],"tags":["xpp","Development"],"authors":"max"},"unlisted":false,"nextItem":{"title":"SQL cheatsheet","permalink":"/blog/2024/05/12/sql-cheat-sheet"}},"content":"We can use the `tableTruncate` method from `SqlDataDictionary` to truncate a table in FinOps, useful for a huge SQL table.\\r\\n\\r\\n```cs\\r\\npublic static void main(Args _args)\\r\\n{\\r\\n    DictTable dictTable = new DictTable(tablenum(KA_TBYTDStaging));\\r\\n \\r\\n    if (dictTable && dictTable.enabled())\\r\\n    {\\r\\n        str sqlTableName = dictTable.name(DbBackend::Sql);\\r\\n        SqlDataDictionary sqlTable = new SqlDataDictionary();\\r\\n \\r\\n        if (sqlTable.tableExist(sqlTableName))\\r\\n        {\\r\\n            new SqlDataDictionaryPermission(methodstr(SqlDataDictionary, tableTruncate)).assert();\\r\\n            sqlTable.tableTruncate(tablenum(KA_TBYTDStaging), false);\\r\\n            CodeAccessPermission::revertAssert();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n```"},{"id":"/2024/05/12/sql-cheat-sheet","metadata":{"permalink":"/blog/2024/05/12/sql-cheat-sheet","source":"@site/blog/2024-05-12-sql-cheat-sheet.mdx","title":"SQL cheatsheet","description":"SQL Datatype","date":"2024-05-11T00:00:00.000Z","tags":[{"inline":true,"label":"SQL","permalink":"/blog/tags/sql"},{"inline":true,"label":"cheatsheet","permalink":"/blog/tags/cheatsheet"}],"readingTime":2.0833333333333335,"hasTruncateMarker":false,"authors":[{"name":"Max Nguyen","title":"FinOps Ranger","url":"/about","imageURL":"https://github.com/Dynamics365.png","key":"max"}],"frontMatter":{"date":"2024-05-11","title":"SQL cheatsheet","categories":["cheatsheet"],"tags":["SQL","cheatsheet"],"authors":"max"},"unlisted":false,"prevItem":{"title":"Truncate a table using X++","permalink":"/blog/2024/05/11/truncate-a-table-Xpp"},"nextItem":{"title":"SqlPackage - The Element or Annotation class SqlStatistic does not contain the Property class AutoDrop","permalink":"/blog/2024/05/05/Import-a-bacpac-file-into-a-Tier1-environment"}},"content":"## SQL Datatype\\r\\n|             \\t| SQL Datatype    \\t| Description                                                                                                                                                                \\t|\\r\\n|:-----------:\\t|-----------------\\t|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\\t|\\r\\n|    String   \\t| CHAR(size)      \\t| A fixed-length string containing numbers, letters or special characters.   Length may vary from 0-255.                                                                     \\t|\\r\\n|             \\t| VARCHAR(size)   \\t| Variable-length string where the length may vary from 0-65535. Similar to   CHAR.                                                                                          \\t|\\r\\n|             \\t| TEXT(size)      \\t| Can contain a string of size up to 65536 bytes.                                                                                                                            \\t|\\r\\n|             \\t| TINY TEXT       \\t| Can contain a string of up to 255 characters.                                                                                                                              \\t|\\r\\n|             \\t| MEDIUM TEXT     \\t| Can contain a string of up to 16777215 characters.                                                                                                                         \\t|\\r\\n|             \\t| LONG TEXT       \\t| Can contain a string of up to 4294967295 characters.                                                                                                                       \\t|\\r\\n|             \\t| BINARY(size)    \\t| Similar to CHAR() but stores binary byte strings.                                                                                                                          \\t|\\r\\n|             \\t| VARBINARY(size) \\t| Similar to VARCHAR() but stores binary byte strings.                                                                                                                       \\t|\\r\\n|             \\t| BLOB(size)      \\t| Holds blobs up to 65536 bytes.                                                                                                                                             \\t|\\r\\n|             \\t| TINYBLOB        \\t| It is used for Binary Large Objects and has a maximum size of 255bytes.                                                                                                    \\t|\\r\\n|             \\t| MEDIUMBLOB      \\t| Holds blobs up to 16777215 bytes.                                                                                                                                          \\t|\\r\\n|             \\t| LONGBLOB        \\t| Holds blobs up to 4294967295 bytes.                                                                                                                                        \\t|\\r\\n|             \\t|                 \\t|                                                                                                                                                                            \\t|\\r\\n|   Numberic  \\t| BIT(size)       \\t| Bit-value type, where size varies from 1 to 64. Default value: 1                                                                                                           \\t|\\r\\n|             \\t| INT(size)       \\t| Integer with values in the signed range of -2147483648 to 2147483647 and   values in the unsigned range of 0 to 4294967295.                                                \\t|\\r\\n|             \\t| TINYINT(size)   \\t| Integer with values in the signed range of -128 to 127 and values in the   unsigned range of 0 to 255.                                                                     \\t|\\r\\n|             \\t| SMALLINT(size)  \\t| Integer with values in the signed range of -32768 to 32767 and values in   the unsigned range of 0 to 65535.                                                               \\t|\\r\\n|             \\t| MEDIUMINT(size) \\t| Integer with values in the signed range of -8388608 to 8388607 and values   in the unsigned range of 0 to 16777215.                                                        \\t|\\r\\n|             \\t| BIGINT(size)    \\t| Integer with values in the signed range of 9223372036854775808 to   9223372036854775807 and values in the unsigned range of 0 to   18446744073709551615.                   \\t|\\r\\n|             \\t| BOOLEAN         \\t| Boolean values where 0 is considered as FALSE and non-zero values are   considered TRUE.                                                                                   \\t|\\r\\n|             \\t| FLOAT (p)       \\t| The floating-point number is stored. If the precision parameter is set   between 0 to 24, the type is FLOAT() else if it lies between 25 to 53, the   datatype is DOUBLE() \\t|\\r\\n|             \\t|                 \\t|                                                                                                                                                                            \\t|\\r\\n| Date & Time \\t| DATE            \\t| Stores date in YYYY-MM-DD format with dates in the range of \'1000-01-01\'   to \'9999-12-31\'.                                                                                \\t|\\r\\n|             \\t| TIME(fsp)       \\t| Stores time in hh:mm:ss format with times in the range of \'-838:59:59\' to   \'838:59:59\'.                                                                                   \\t|\\r\\n|             \\t| DATETIME(fsp)   \\t| Stores a combination of date and time in YYYY-MM-DD and hh:mm:ss format,   with values in the range of \'1000-01-01 00:00:00\' to \'9999-12-31 23:59:59\'.                     \\t|\\r\\n|             \\t| TIMESTAMP(fsp)  \\t| It stores values relative to the UnixEpoch, basically a Unix Timestamp.   Values lie in the range of \'1970-01-01 00:00:01\' UTC to \'2038-01-09 03:14:07\'   UTC.             \\t|\\r\\n|             \\t| YEAR            \\t| Stores values of years as a 4digit number format, with a range lying   between -1901 to 2155.                                                                              \\t|\\r\\n\\r\\n## SQL Command\\r\\n\\r\\n```mermaid\\r\\nmindmap\\r\\n  root[SQL Command]\\r\\n    id[Data Definition<br/> Language]\\r\\n      CREATE\\r\\n      DROP\\r\\n      ALTER\\r\\n      TRUNCATE\\r\\n    id[Data Manipulation Language]\\r\\n      INSERT\\r\\n      UPDATE\\r\\n      DELETE\\r\\n    [Transaction Control Language]\\r\\n      COMMIT\\r\\n      ROLLBACK\\r\\n      SAVEPOINT\\r\\n    [Data Query Language]\\r\\n     SELECT\\r\\n    [Data Control Language]\\r\\n     Grant\\r\\n     Revoke\\r\\n```\\r\\n\\r\\n## SQL Constraints\\r\\n\\r\\n    * `NOT NULL`: Specifies that this column cannot store a NULL value.\\r\\n```sql\\r\\nCREATE TABLE student\\r\\n  (\\r\\n     id      INT(8) NOT NULL,\\r\\n     name    VARCHAR(30) NOT NULL,\\r\\n     address VARCHAR(50)\\r\\n  ); \\r\\n```\\r\\n\\r\\n    * `UNIQUE`: Specifies that this column can have only Unique values, i.e the values cannot be repeated in the column.\\r\\n\\r\\n```sql\\r\\nCREATE TABLE Student\\r\\n(\\r\\nID int(8) UNIQUE,\\r\\nNAME varchar(10) NOT NULL,\\r\\nADDRESS varchar(20)\\r\\n);\\r\\n```"},{"id":"/2024/05/05/Import-a-bacpac-file-into-a-Tier1-environment","metadata":{"permalink":"/blog/2024/05/05/Import-a-bacpac-file-into-a-Tier1-environment","source":"@site/blog/2024-05-05-Import-a-bacpac-file-into-a-Tier1-environment/index.md","title":"SqlPackage - The Element or Annotation class SqlStatistic does not contain the Property class AutoDrop","description":"If you are using d365fo.tools to Import a bacpac file into a Tier1 environment and you got an error","date":"2024-05-05T00:00:00.000Z","tags":[{"inline":true,"label":"SqlPackage","permalink":"/blog/tags/sql-package"},{"inline":true,"label":"troubleshoot","permalink":"/blog/tags/troubleshoot"}],"readingTime":0.3433333333333333,"hasTruncateMarker":false,"authors":[{"name":"Max Nguyen","title":"FinOps Ranger","url":"/about","imageURL":"https://github.com/Dynamics365.png","key":"max"}],"frontMatter":{"date":"2024-05-05","title":"SqlPackage - The Element or Annotation class SqlStatistic does not contain the Property class AutoDrop","categories":["d365fo.tools"],"tags":["SqlPackage","troubleshoot"],"authors":"max"},"unlisted":false,"prevItem":{"title":"SQL cheatsheet","permalink":"/blog/2024/05/12/sql-cheat-sheet"},"nextItem":{"title":"Self-Update to latest quality update","permalink":"/blog/2024/05/02/Self-Update-to-latest-quality-update"}},"content":"If you are using [d365fo.tools](https://github.com/d365collaborative/d365fo.tools) to [Import a bacpac file into a Tier1 environment](https://github.com/d365collaborative/d365fo.tools/wiki/How-To-Import-Bacpac-Into-Tier1) and you got an error\\r\\n\\r\\n:::danger Error output was\\r\\n*Error importing database:An error occurred during deployment plan generation. Deployment cannot continue. The Element or Annotation class SqlStatistic does not contain the Property class AutoDrop.*\\r\\n:::\\r\\n\\r\\nThe d365fo.tools use `Invoke-D365InstallSqlPackage` to install SqlPackage, but its version is not up to date, compare to the bacpac files generated from LCS database export.\\r\\nTo solve the issue, we need to downlaod [the latest version as a zip file](https://learn.microsoft.com/en-us/sql/tools/sqlpackage/sqlpackage-download?view=sql-server-ver16#installation-file-download-alternative), unblock, unzip and replace files in the SqlPackage folder `C:\\\\Temp\\\\d365fo.tools\\\\SqlPackage` with the new version."},{"id":"/2024/05/02/Self-Update-to-latest-quality-update","metadata":{"permalink":"/blog/2024/05/02/Self-Update-to-latest-quality-update","source":"@site/blog/2024-05-02-Self-Update-to-latest-quality-update/index.md","title":"Self-Update to latest quality update","description":"1. Login to LCS \u2013 and select the F&O environment that is enabled for Synapse Link","date":"2024-05-02T00:00:00.000Z","tags":[{"inline":true,"label":"Self-Update","permalink":"/blog/tags/self-update"}],"readingTime":1.05,"hasTruncateMarker":false,"authors":[{"name":"Max Nguyen","title":"FinOps Ranger","url":"/about","imageURL":"https://github.com/Dynamics365.png","key":"max"}],"frontMatter":{"date":"2024-05-02","title":"Self-Update to latest quality update","categories":["Update"],"tags":["Self-Update"],"authors":"max"},"unlisted":false,"prevItem":{"title":"SqlPackage - The Element or Annotation class SqlStatistic does not contain the Property class AutoDrop","permalink":"/blog/2024/05/05/Import-a-bacpac-file-into-a-Tier1-environment"},"nextItem":{"title":"Throw behaviour in X++","permalink":"/blog/2024/01/07/ThrowBehaviour"}},"content":"1. Login to LCS \u2013 and select the F&O environment that is enabled for Synapse Link\\r\\n2. Validate the platform version of the environment under Environment version information as shown bellow.\\r\\n\\r\\n![Platform version](2024-05-04_16h10_59.png)\\r\\n\\r\\n3. If the platform version of your environment is lower than corresponding rows bellow \u2013 for example above environment platform version is 7.0.7036.113 and required version is 7.0.7036.133 or Higher. The above environment must be updated to the latest quality update.\\r\\n\\r\\n| Application   (Platform) \\t| Required platform version \\t| PQU schedule                                                  \\t|\\r\\n|--------------------------\\t|---------------------------\\t|---------------------------------------------------------------\\t|\\r\\n| 10.0.36 (PU 60)          \\t| 7.0.7036.133 or Higher    \\t| 10.0.36 PQU-3     (January 22, 2023 to February 25, 2024) \\t|\\r\\n| 10.0.37 (PU 61)        \\t| 7.0.7068.109   or Higher  \\t| 10.0.37 PQU-2     January 8, 2024 to February 11, 2024    \\t|\\r\\n| 10.0.38 (PU 62)          \\t| 7.0.7120.59 or   Higher   \\t|                                                               \\t|\\r\\n\\r\\n4. There are two ways to update the F&O environment with quality update. Self-update using the latest quality update and second wait for the PQU (Proactive quality update) to be pushed to your environment by Microsoft\\r\\n\\r\\n5. Above table list out the PQU schedule when your environment will receive the PQU, based on the PQU schedule [Release schedule for PQU](https://learn.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/get-started/quality-updates-schedule?context=%2Fdynamics365%2Fcontext%2Fcommerce#high-level-pqu-train-schedule)\\r\\n\\r\\n6. Customer can also self-update the environment by self-applying the latest quality update instead of waiting for PQU, follow the steps bellow to self-update to latest quality update [Reference documentation](https://learn.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/migration-upgrade/download-hotfix-lcs#finance-and-operations-apps)\\r\\n   \\r\\n    * In the LCS environment page, go to Available updates section and click on view update.\\r\\n    ![alt text](2024-05-04_16h20_36.png)\\r\\n    * Click on save package.\\r\\n    ![alt text](2024-05-04_16h21_13.png)\\r\\n    * Click on Save package, on the Save package to asset library dialog opens, give a name and click on Save package. This action will save the latest cumulative version to your LCS project Asset library.\\r\\n    ![alt text](image.png)\\r\\n    * Follow the steps to apply update to cloud environment [Apply updates to cloud environments - Finance & Operations | Dynamics 365 | Microsoft Learn](https://learn.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/deployment/apply-deployable-package-system?context=%2Fdynamics365%2Fcontext%2Fcommerce#apply-a-package-to-a-non-production-environment-by-using-lcs)"},{"id":"/2024/01/07/ThrowBehaviour","metadata":{"permalink":"/blog/2024/01/07/ThrowBehaviour","source":"@site/blog/2024-01-07-ThrowBehaviour/index.md","title":"Throw behaviour in X++","description":"References","date":"2024-01-07T00:00:00.000Z","tags":[{"inline":true,"label":"throw","permalink":"/blog/tags/throw"},{"inline":true,"label":"error","permalink":"/blog/tags/error"}],"readingTime":2.3866666666666667,"hasTruncateMarker":true,"authors":[{"name":"Kome Hoang","title":"Maintainer of Automaly","url":"https://www.linkedin.com/in/khahgm7","imageURL":"https://github.com/khahgm7.png","key":"kome"}],"frontMatter":{"date":"2024-01-07","title":"Throw behaviour in X++","categories":["X++"],"tags":["throw","error"],"authors":"kome"},"unlisted":false,"prevItem":{"title":"Self-Update to latest quality update","permalink":"/blog/2024/05/02/Self-Update-to-latest-quality-update"},"nextItem":{"title":"Using XppPrePostArgs to pass parameters through a method","permalink":"/blog/2024/01/02/TrickXppPrePostArg"}},"content":"## References\\r\\n\\r\\n- [X++ exception handling](https://learn.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/dev-ref/xpp-exceptions)\\r\\n\\r\\n## How to\\r\\n\\r\\n### Prerequisite\\r\\n\\r\\nFor the purpose of testing, I had this data set of CustGroup. This can also be found on Legal Entity ```USRT``` of demo data comes with a new environment of Dynamics 365 Finance.\\r\\n\\r\\n| Customer group | Description |\\r\\n|----------------|-------------|\\r\\n| 10 | Wholesale customers|\\r\\n| 20 | Major customers|\\r\\n| 30 | Retail customers|\\r\\n| 40 | Internet customers|\\r\\n| 50 | Employees|\\r\\n| 80 | Wholesale customers|\\r\\n| 90 | Wholesale customers|\\r\\n\\r\\nI added two new buttons on ```CustGroup``` form:\\r\\n\\r\\n- ```Bulk update Desc```: This button will loop through each and all records in the above table and update the Description to Description + ```+ Updated``` except one containing \\"Employee\\". They will become like below.\\r\\n\\r\\n| Customer group | Description |\\r\\n|----------------|-------------|\\r\\n| 10 | Wholesale customers + Updated|\\r\\n| 20 | Major customers + Updated|\\r\\n| 30 | Retail customers + Updated|\\r\\n| 40 | Internet customers + Updated|\\r\\n| 50 | Employees|\\r\\n| 80 | Wholesale customers + Updated|\\r\\n| 90 | Wholesale customers + Updated|\\r\\n\\r\\n- ```Reverse Bulk update Desc```: This button will update all Description back to its original by removing the word ```+ Updated```.\\r\\n\\r\\n### Let\'s do it\\r\\n\\r\\n### When we don\'t use ```throw```\\r\\n\\r\\nIn the extension class named ```CustGroup_ButtonHandlers```, I put these codes which will handle the event of clicking those two buttons.\\r\\n\\r\\n:::tip\\r\\nThis type of ```FormControlEventHandler``` will only be needed when you are extending a standard form. For a totally custom form, you can add a [Clicked() method](https://learn.microsoft.com/en-us/dotnet/api/dynamics.ax.application.formbuttoncontrol.clicked) method for any buttons on the form. \\r\\n:::\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n```cs\\r\\ninternal final class CustGroup_ButtonHandlers\\r\\n{\\r\\n    [FormControlEventHandler(formControlStr(CustGroup, BulkUpdateDesc), FormControlEventType::Clicked)]\\r\\n    public static void BulkUpdateDesc_OnClicked(FormControl sender, FormControlEventArgs e)\\r\\n    {\\r\\n        FormDataSource custGroupDS = sender.formRun().dataSource(formDataSourceStr(CustGroup, CustGroup));\\r\\n        \\r\\n        ttsbegin;\\r\\n\\r\\n        for(\\r\\n            CustGroup custGroup =\\r\\n                custGroupDS.getFirst() ?\\r\\n                custGroupDS.getFirst() :\\r\\n                custGroupDS.cursor()\\r\\n            ; custGroup\\r\\n            ; custGroup = custGroupDS.getNext()\\r\\n        )\\r\\n        {\\r\\n            if(strContains(custGroup.Name, \\"Employees\\"))\\r\\n            {\\r\\n                // Show an error here but do not stop the loop\\r\\n                error(\\"This group\'s name contains \\\\\\"Employees\\\\\\". Operation skipped but continue until the end of loop.\\");\\r\\n\\r\\n                // Continue the loop by (1) skipping below code and (2) getting the next record from the DS\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            custGroup.Name = custGroup.Name + \\" + Updated\\";\\r\\n            custGroup.doUpdate();\\r\\n        }\\r\\n\\r\\n        ttscommit;\\r\\n\\r\\n        custGroupDS.research(true);\\r\\n    }\\r\\n    \\r\\n    [FormControlEventHandler(formControlStr(CustGroup, BulkRevUpdateDesc), FormControlEventType::Clicked)]\\r\\n    public static void BulkRevUpdateDesc_OnClicked(FormControl sender, FormControlEventArgs e)\\r\\n    {\\r\\n        FormDataSource custGroupDS = sender.formRun().dataSource(formDataSourceStr(CustGroup, CustGroup));\\r\\n\\r\\n        ttsbegin;\\r\\n\\r\\n        for(\\r\\n            CustGroup custGroup =\\r\\n                custGroupDS.getFirst() ?\\r\\n                custGroupDS.getFirst() :\\r\\n                custGroupDS.cursor()\\r\\n            ; custGroup\\r\\n            ; custGroup = custGroupDS.getNext()\\r\\n        )\\r\\n        {\\r\\n            custGroup.Name = strReplace(custGroup.Name, \\" + Updated\\", \\"\\");\\r\\n            custGroup.doUpdate();\\r\\n        }\\r\\n\\r\\n        ttscommit;\\r\\n\\r\\n        custGroupDS.research(true);\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\nNotice the part\\r\\n\\r\\n```cs\\r\\nif(strContains(custGroup.Name, \\"Employees\\"))\\r\\n{\\r\\n    // Show an error here but do not stop the loop\\r\\n    error(\\"This group\'s name contains \\\\\\"Employees\\\\\\". Operation skipped but continue until the end of loop.\\");\\r\\n\\r\\n    // Continue the loop by (1) skipping below code and (2) getting the next record from the DS\\r\\n    continue;\\r\\n}\\r\\n```\\r\\n\\r\\nThis part will do the job of updating the Description of the CustGroup record. Yet, I am calling ```error``` to display a message (which is speicifed as an \\"error\\") to users.\\r\\n\\r\\nNow, let\'s click the ```Bulk update Desc``` button. You will see the error message and the updated description. We can tell that the loop was not stopped.\\r\\n\\r\\n![alt text](image.png)\\r\\n\\r\\n### When we use ```throw```\\r\\n\\r\\nLet\'s change the part mentioned above to this one. Notice that we now will use ```throw``` before ```error```.\\r\\n\\r\\n```cs\\r\\nif(strContains(custGroup.Name, \\"Employees\\"))\\r\\n{\\r\\n    // Show an error here and break the loop\\r\\n    throw error(\\"This group\'s name contains \\\\\\"Employees\\\\\\". Operation broken.\\");\\r\\n\\r\\n    // Below code line is actually never called because the throw will stop the code execution immediately\\r\\n    continue;\\r\\n}\\r\\n```\\r\\n\\r\\nClicking ```Bulk update Desc``` will result in this.\\r\\n\\r\\n![alt text](image-1.png)\\r\\n\\r\\nYet, upon refreshing the form, we will see that no transaction within the same ```tts``` level was actually committed.\\r\\n\\r\\n![alt text](image-2.png)\\r\\n\\r\\nNow if we bring the ```tts``` inside the loop.\\r\\n\\r\\n```cs\\r\\n{\\r\\n    if(strContains(custGroup.Name, \\"Employees\\"))\\r\\n    {\\r\\n        // Show an error here and break the loop\\r\\n        throw error(\\"This group\'s name contains \\\\\\"Employees\\\\\\". Operation broken.\\");\\r\\n\\r\\n        // Below code line is actually never called because the throw will stop the code execution immediately\\r\\n        continue;\\r\\n    }\\r\\n\\r\\n    ttsbegin;\\r\\n\\r\\n    custGroup.Name = custGroup.Name + \\" + Updated\\";\\r\\n    custGroup.doUpdate();\\r\\n\\r\\n    ttscommit;\\r\\n}\\r\\n```\\r\\n\\r\\nUpop refreshing the form, we will see what transaction were commited and what part of the loop was broken.\\r\\n\\r\\n![alt text](image-3.png)\\r\\n\\r\\nSo, that\'s how ```throw``` works in X++."},{"id":"/2024/01/02/TrickXppPrePostArg","metadata":{"permalink":"/blog/2024/01/02/TrickXppPrePostArg","source":"@site/blog/2024-01-02-TrickXppPrePostArg/index.md","title":"Using XppPrePostArgs to pass parameters through a method","description":"References","date":"2024-01-02T00:00:00.000Z","tags":[{"inline":true,"label":"XppPrePostArgs","permalink":"/blog/tags/xpp-pre-post-args"}],"readingTime":1.6233333333333333,"hasTruncateMarker":true,"authors":[{"name":"Kome Hoang","title":"Maintainer of Automaly","url":"https://www.linkedin.com/in/khahgm7","imageURL":"https://github.com/khahgm7.png","key":"kome"}],"frontMatter":{"date":"2024-01-02","title":"Using XppPrePostArgs to pass parameters through a method","categories":["X++"],"tags":["XppPrePostArgs"],"authors":"kome"},"unlisted":false,"prevItem":{"title":"Throw behaviour in X++","permalink":"/blog/2024/01/07/ThrowBehaviour"},"nextItem":{"title":"Using Kusto functions in Power BI datasource","permalink":"/blog/2024/01/04/KustoVsPBI"}},"content":"## References\\r\\n\\r\\n- [XppPrePostArgs Class (Microsoft.Dynamics.Ax.Xpp)](https://learn.microsoft.com/en-us/dotnet/api/microsoft.dynamics.ax.xpp.xppprepostargs)\\r\\n\\r\\n## How to\\r\\n\\r\\nTake a very safe table to play around: ```CustGroup``` (Customer Group), we will see how we can utilise ```XppPrePostArgs``` here to save a parameter before the update is commited to the database and then take it out for us to execute futher logic.\\r\\n\\r\\n*The tricky part is that such table does not even have an ```update``` method.*\\r\\n\\r\\nNormally saying, if a method is available on the common, we can navigate to the design of it and copy the ```Pre-``` and ```Post-Event Handler``` from here.\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n![Alt text](image.png)\\r\\n\\r\\nYet, in our example here, such method - ```update``` - is not available. So, we can simply make a [Class extension](https://learn.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/extensibility/method-wrapping-coc) to wrap the ```common.update()``` method. The code can be as simple as below.\\r\\n\\r\\n```cs\\r\\n[ExtensionOf(tableStr(CustGroup))]\\r\\nfinal class CustGroup_Extension\\r\\n{\\r\\n    public void update()\\r\\n    {\\r\\n        next update();\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\nWe will then take the original value of ```CustGroup.Name``` and save it to the instance of ```XppPrePostArgs```. This part will be under the ```Pre-Event``` method. The code is as below.\\r\\n\\r\\n```cs\\r\\nconst static str OrigNameFld = \\"OrigName\\";\\r\\n\\r\\n[PreHandlerFor(classStr(CustGroup_Extension), methodStr(CustGroup_Extension, update))]\\r\\npublic static void CustGroup_Extension_Pre_update(XppPrePostArgs args)\\r\\n{\\r\\n    // Get custGroup buffer\\r\\n    // No super() has been called, so the changes have not been committed\\r\\n    CustGroup custGroup = args.getThis();\\r\\n\\r\\n    // Get original value of field Name\\r\\n    Description origName = custGroup.orig().Name;\\r\\n\\r\\n    // Save the value to args\\r\\n    args.setArg(\\r\\n        OrigNameFld\\r\\n        , origName\\r\\n    );\\r\\n}\\r\\n```\\r\\n\\r\\nAfter the changes are commited to the database, we will take the saved parm out and execute our logic. In this case, I will assess if the new ```CustGroup.Name``` contains ```\\"Kome\\"```, if it does, revert it back to its original value and throw message. This part will be under ```Post-Event``` method. The code is as below (I will show the whole class so we can see how the parm is passed by using ```setArg``` and ```getArg```)\\r\\n\\r\\n```cs\\r\\ninternal final class CustGroup_EventHandlers\\r\\n{\\r\\n    const static str OrigNameFld = \\"OrigName\\";\\r\\n\\r\\n    [PreHandlerFor(classStr(CustGroup_Extension), methodStr(CustGroup_Extension, update))]\\r\\n    public static void CustGroup_Extension_Pre_update(XppPrePostArgs args)\\r\\n    {\\r\\n        // Get custGroup buffer\\r\\n        // No super() has been called, so the changes have not been committed\\r\\n        CustGroup custGroup = args.getThis();\\r\\n\\r\\n        // Get original value of field Name\\r\\n        Description origName = custGroup.orig().Name;\\r\\n\\r\\n        // Save the value to args\\r\\n        args.setArg(\\r\\n            OrigNameFld\\r\\n            , origName\\r\\n        );\\r\\n    }\\r\\n\\r\\n    [PostHandlerFor(classStr(CustGroup_Extension), methodStr(CustGroup_Extension, update))]\\r\\n    public static void CustGroup_Extension_Post_update(XppPrePostArgs args)\\r\\n    {\\r\\n        // Get custGroup buffer and its column Name after updated\\r\\n        CustGroup newCustGroup = args.getThis();\\r\\n        Description newName = newCustGroup.Name;\\r\\n\\r\\n        // Assess and revert\\r\\n        if(Global::strContains(newName, \\"Kome\\"))\\r\\n        {\\r\\n            ttsbegin;\\r\\n            {\\r\\n                // Get the saved parm here and set it to the field value\\r\\n                newCustGroup.Name = args.getArg(OrigNameFld); \\r\\n                newCustGroup.doUpdate();\\r\\n            }\\r\\n            ttscommit;\\r\\n\\r\\n            Global::info(strFmt(\\"New description - \\\\\\"%1\\\\\\" - contains \\\\\\"Kome\\\\\\". Reverted to its original.\\", newName));\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n```\\r\\n\\r\\nAnd, so, we can test it out by setting a new ```Description``` for a ```Customer group```...\\r\\n\\r\\n![Alt text](image-1.png)\\r\\n\\r\\n...upon clicking on button ```Save```, the original value will be updated and a message will be thrown.\\r\\n\\r\\n![Alt text](image-2.png)"},{"id":"/2024/01/04/KustoVsPBI","metadata":{"permalink":"/blog/2024/01/04/KustoVsPBI","source":"@site/blog/2024-01-04-KustoVsPBI/index.md","title":"Using Kusto functions in Power BI datasource","description":"References","date":"2024-01-02T00:00:00.000Z","tags":[{"inline":true,"label":"Kusto","permalink":"/blog/tags/kusto"},{"inline":true,"label":"Power BI","permalink":"/blog/tags/power-bi"}],"readingTime":1.82,"hasTruncateMarker":true,"authors":[{"name":"Kome Hoang","title":"Maintainer of Automaly","url":"https://www.linkedin.com/in/khahgm7","imageURL":"https://github.com/khahgm7.png","key":"kome"}],"frontMatter":{"date":"2024-01-02","title":"Using Kusto functions in Power BI datasource","categories":["Power BI"],"tags":["Kusto","Power BI"],"authors":"kome"},"unlisted":false,"prevItem":{"title":"Using XppPrePostArgs to pass parameters through a method","permalink":"/blog/2024/01/02/TrickXppPrePostArg"},"nextItem":{"title":"No data is inserted/modified in temporary table when processing an SRS report using Pre-process","permalink":"/blog/2024/01/04/NoDataInTmpTableForPreProcessReport"}},"content":"## References\\r\\n- [Use Azure Data Explorer data in Power BI](https://learn.microsoft.com/en-us/azure/data-explorer/power-bi-data-connector?tabs=web-ui)\\r\\n- [.create function command](https://learn.microsoft.com/en-us/azure/data-explorer/kusto/management/create-function)\\r\\n- [Azure Data Explorer](https://dataexplorer.azure.com/home)\\r\\n- [Kusto Query Language (KQL)](https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/)\\r\\n\\r\\n## How to\\r\\n\\r\\n### Let\'s create demo data for testing\\r\\n\\r\\nFor the purpose of testing and demonstrating, I will create a new table in my testing ADX cluster (everyone can create their own free cluster following [Create a free Azure Data Explorer cluster](https://learn.microsoft.com/en-us/azure/data-explorer/start-for-free-web-ui)). Let\'s call it ```UserAsset```.\\r\\n\\r\\nThe table will have two fields:\\r\\n- ```User``` - type ```string```\\r\\n- ```NumberOfLaptop``` - type ```integer```\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\nThe script is as below.\\r\\n\\r\\n```sql\\r\\n.create table UserAsset \\r\\n(\\r\\n    User: string\\r\\n    , NumberOfLaptop: int\\r\\n) \\r\\n```\\r\\n\\r\\nThen, we will put some demo data into the table.\\r\\n\\r\\n```sql\\r\\n.ingest inline into table UserAsset <|\\r\\nMax,2\\r\\nKome,1\\r\\n```\\r\\n\\r\\nWe will have the table and its data like below.\\r\\n\\r\\n\\r\\n```sql\\r\\nUserAsset\\r\\n| project\\r\\n    User\\r\\n    , NumberOfLaptop\\r\\n    , IngestedOn = ingestion_time()\\r\\n| order by NumberOfLaptop desc\\r\\n```\\r\\n\\r\\n![Kusto table and data](image.png)\\r\\n\\r\\n### Get data from Azure Data Explorer (ADX) to Power BI (PBI)\\r\\n\\r\\nSimple enough, we then can use the very Kusto query (KQ) in PBI Desktop to get such data.\\r\\n\\r\\n![Add new datasource in PBID](image-1.png)\\r\\n\\r\\nWe can copy the query here.\\r\\n\\r\\n![Add query to datasource](image-2.png)\\r\\n\\r\\nUpon clicking OK and transform the data, we will have the data available. Notice that whole KQ will be put as plain text in the source.\\r\\n\\r\\n![Alt text](image-3.png)\\r\\n\\r\\n### Using Kusto function to simplify the process\\r\\n\\r\\nNow, we can create a function to get data from ADX to PBI Desktop.\\r\\n\\r\\n```sql\\r\\n.create function GetDataForPBI() {\\r\\n    UserAsset\\r\\n    | project\\r\\n        User\\r\\n        , NumberOfLaptop\\r\\n        , IngestedOn = ingestion_time()\\r\\n    | order by NumberOfLaptop desc\\r\\n}\\r\\n```\\r\\n\\r\\n![Create function](image-4.png)\\r\\n\\r\\nThen, we can simply call the function from PBI to get the data instead of calling the whole query.\\r\\n\\r\\n![Getting data using function](image-5.png)\\r\\n\\r\\n### Enhacing data by altering the function\\r\\n\\r\\nWe can even passing parameters to the functions to alter the data. In this case, let\'s try adding some texts to User. My function would become as below:\\r\\n- Taking a boolean input ```_addText```, it is defaulted to ```false```\\r\\n- If ```_addText``` is true, add some text to ```User```\\r\\n- Else, leave ```User``` as it is\\r\\n\\r\\n*Notice that we will need to use ```create-or-alter``` because the function is existing already.*\\r\\n\\r\\n```sql\\r\\n.create-or-alter function GetDataForPBI(_addText:bool = false) {\\r\\nUserAsset\\r\\n| extend\\r\\n    User = iff(\\r\\n        _addText\\r\\n        , strcat(\\r\\n            User\\r\\n            , \\"-AddedText\\"\\r\\n        )\\r\\n        , User\\r\\n    )\\r\\n| project\\r\\n    User\\r\\n    , NumberOfLaptop\\r\\n    , IngestedOn = ingestion_time()\\r\\n| order by NumberOfLaptop desc\\r\\n}\\r\\n```\\r\\n\\r\\nThen, we can call the function from PBI and add the parameter to see how the data is reflected.\\r\\n\\r\\n![Function with parameters](image-6.png)\\r\\n\\r\\nWe can even add new columns from ADX and the new data will be reflected on PBI. For example, I will add a column (with emoji) to indicate someone is owning more than one laptop.\\r\\n\\r\\nMy function will become as below.\\r\\n\\r\\n```sql\\r\\n.create-or-alter function GetDataForPBI(_addText:bool = false) {\\r\\n    UserAsset\\r\\n    | extend\\r\\n        User = iff(\\r\\n            _addText\\r\\n            , strcat(\\r\\n                User\\r\\n                , \\"-AddedText\\"\\r\\n            )\\r\\n            , User\\r\\n        )\\r\\n    | project\\r\\n        User\\r\\n        , NumberOfLaptop\\r\\n        , IngestedOn = ingestion_time()\\r\\n        , OwningMoreThanOneLaptop = iff(\\r\\n            NumberOfLaptop > 1\\r\\n            , \\"\ud83d\udcbb+\\"\\r\\n            , \\"\\"\\r\\n        )\\r\\n    | order by NumberOfLaptop desc\\r\\n}\\r\\n```\\r\\n\\r\\nUpon refreshing the source, we can see the new column coming up.\\r\\n\\r\\n![New column from Kusto](image-7.png)"},{"id":"/2024/01/04/NoDataInTmpTableForPreProcessReport","metadata":{"permalink":"/blog/2024/01/04/NoDataInTmpTableForPreProcessReport","source":"@site/blog/2024-01-04-NoDataInTmpTableForPreProcessReport/index.md","title":"No data is inserted/modified in temporary table when processing an SRS report using Pre-process","description":"References","date":"2024-01-02T00:00:00.000Z","tags":[{"inline":true,"label":"SRS","permalink":"/blog/tags/srs"},{"inline":true,"label":"Pre-process","permalink":"/blog/tags/pre-process"}],"readingTime":1.1766666666666667,"hasTruncateMarker":true,"authors":[{"name":"Kome Hoang","title":"Maintainer of Automaly","url":"https://www.linkedin.com/in/khahgm7","imageURL":"https://github.com/khahgm7.png","key":"kome"}],"frontMatter":{"date":"2024-01-02","title":"No data is inserted/modified in temporary table when processing an SRS report using Pre-process","categories":["X++"],"tags":["SRS","Pre-process"],"authors":"kome"},"unlisted":false,"prevItem":{"title":"Using Kusto functions in Power BI datasource","permalink":"/blog/2024/01/04/KustoVsPBI"},"nextItem":{"title":"Set default model for Dynamics 365 Finance Operations project","permalink":"/blog/2023/12/26/set-default-model-for-d365-project"}},"content":"## References\\r\\n- [Use pre-processed RDP classes](https://learn.microsoft.com/en-us/dynamicsax-2012/appuser-itpro/tips-to-help-prevent-long-running-reports-from-timing-out#use-pre-processed-rdp-classes)\\r\\n- [Microsoft Dynamics AX 2012 White Paper: Report Programming Model](https://www.microsoft.com/en-us/download/details.aspx?id=27725)\\r\\n\\r\\n## How to\\r\\n\\r\\nPre-process RDP has become very commonplace these days, especially to ones who work with SSRS reports on Dynamics 365 FO a lot.\\r\\n\\r\\nRecently, I faced an issue when no data was inserted into or modififed in my temporary table during run-time despite the fact that RDP class (and its related ones within the same framework) was executed successfully. Even debugging did not show me what was going wrong. There was simply no SQL statements in the trace that I captured.\\r\\n\\r\\nTurned out that I will need to take ownership of the temp table instance before manipulating any data in it.\\r\\n\\r\\nMy code used to be (when it did not work):\\r\\n\\r\\n```cs\\r\\ninternal final class CSG_PostedServiveOrderWithoutInvDP extends SrsReportDataProviderPreProcessTempDB\\r\\n{\\r\\n    CSG_PostedServiveOrderWithoutInvTmp           tmpTable;\\r\\n\\r\\n    [SRSReportDataSetAttribute(tableStr(CSG_PostedServiveOrderWithoutInvTmp))]\\r\\n    public CSG_PostedServiveOrderWithoutInvTmp getTmpTable()\\r\\n    {\\r\\n        select tmpTable;\\r\\n        return tmpTable;\\r\\n    }\\r\\n\\r\\n    public void processReport()\\r\\n    {\\r\\n        ttsbegin;\\r\\n        this.populateTmpTable();\\r\\n        ttscommit;\\r\\n    }\\r\\n\\r\\n    private void populateTmpTable()\\r\\n    {\\r\\n        // Insert data to tmp table here.\\r\\n    }\\r\\n}\\r\\n```\\r\\n\x3c!-- truncate --\x3e\\r\\nI would need to call out to ```SrsReportDataProviderPreProcessTempDB.takeOwnershipOfTempTable()``` to have it work.\\r\\n\\r\\nMy code then became:\\r\\n\\r\\n```cs\\r\\ninternal final class CSG_PostedServiveOrderWithoutInvDP extends SrsReportDataProviderPreProcessTempDB\\r\\n{\\r\\n    CSG_PostedServiveOrderWithoutInvTmp           tmpTable;\\r\\n\\r\\n    [SRSReportDataSetAttribute(tableStr(CSG_PostedServiveOrderWithoutInvTmp))]\\r\\n    public CSG_PostedServiveOrderWithoutInvTmp getTmpTable()\\r\\n    {\\r\\n        select tmpTable;\\r\\n        return tmpTable;\\r\\n    }\\r\\n\\r\\n    public void processReport()\\r\\n    {\\r\\n        ttsbegin;\\r\\n        // Take ownership of each and all tmpTable before using them in the RDP\\r\\n        this.takeOwnershipTmp(); \\r\\n\\r\\n        // Data manipulation then can be conducted without an issue\\r\\n        this.populateTmpTable();\\r\\n        ttscommit;\\r\\n    }\\r\\n\\r\\n    private void takeOwnershipTmp()\\r\\n    {\\r\\n        // Take ownership of the current instance of tmpTable here\\r\\n        this.takeOwnershipOfTempTable(tmpTable);\\r\\n    }\\r\\n\\r\\n    private void populateTmpTable()\\r\\n    {\\r\\n        // Insert data to tmp table here.\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\nThe code behind the ```SrsReportDataProviderPreProcessTempDB.takeOwnershipOfTempTable()``` is as below (for ones who might want to implement their own framework):\\r\\n\\r\\n```cs\\r\\n/// <summary>\\r\\n    /// Takes ownership of the given temp table.\\r\\n    /// </summary>\\r\\n    /// <param name=\\"_tempDbTable\\">\\r\\n    /// The table to take ownership of.\\r\\n    /// </param>\\r\\n    public void takeOwnershipOfTempTable(Common _tempDbTable)\\r\\n    {\\r\\n        DictTable dictTable;\\r\\n        TableId tableId;\\r\\n        #SRSFramework\\r\\n\\r\\n        if (!this.parmUseDefaultTransactionOnly())\\r\\n        {\\r\\n            _tempDbTable.setConnection(this.parmUserConnection());\\r\\n        }\\r\\n\\r\\n        tableId = _tempDbTable.TableId;\\r\\n        dictTable = new DictTable(tableId);\\r\\n        if(!dictTable)\\r\\n        {\\r\\n            throw error(strFmt(\\"@SYS4007193\\", tableId2name(tableId)));\\r\\n        }\\r\\n\\r\\n        new ExecutePermission().assert();\\r\\n        dictTable.callObject(#TempDBMethodName_TakeOwnership, _tempDbTable, true);\\r\\n        CodeAccessPermission::revertAssert();\\r\\n    }\\r\\n```"},{"id":"/2023/12/26/set-default-model-for-d365-project","metadata":{"permalink":"/blog/2023/12/26/set-default-model-for-d365-project","source":"@site/blog/2023-12-26-set-default-model-for-d365-project.mdx","title":"Set default model for Dynamics 365 Finance Operations project","description":"Open Run","date":"2023-12-26T00:00:00.000Z","tags":[{"inline":true,"label":"Development tools","permalink":"/blog/tags/development-tools"}],"readingTime":0.18333333333333332,"hasTruncateMarker":false,"authors":[{"name":"Max Nguyen","title":"FinOps Ranger","url":"/about","imageURL":"https://github.com/Dynamics365.png","key":"max"}],"frontMatter":{"date":"2023-12-26","title":"Set default model for Dynamics 365 Finance Operations project","categories":["X++","Development tools"],"tags":["Development tools"],"authors":"max"},"unlisted":false,"prevItem":{"title":"No data is inserted/modified in temporary table when processing an SRS report using Pre-process","permalink":"/blog/2024/01/04/NoDataInTmpTableForPreProcessReport"},"nextItem":{"title":"How to hide New and Delete buttons (command buttons) in form","permalink":"/blog/2023/12/21/How-to-hide-New-and-Delete-buttons-in-form-1"}},"content":"Open **Run**\\r\\n\\r\\nVS2017 and prior `%UserProfile%/Documents/Visual Studio 2015\\\\settings\\\\`\\r\\n\\r\\nVS2019 and later `%UserProfile%/Documents/Visual Studio Dynamics 365` \\r\\n\\r\\nOpen `DynamicsDevConfig.XML`, change the default model in `DefaultModelForNewProjects` property\\r\\n\\r\\n```XML showLineNumbers title=\\"DynamicsDevConfig.XML\\"\\r\\n<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>\\r\\n<DynamicsDevConfig xmlns:i=\\"http://www.w3.org/2001/XMLSchema-instance\\" xmlns=\\"http://schemas.microsoft.com/dynamics/2012/03/development/configuration\\">\\r\\n\\t<AddInPaths xmlns:d2p1=\\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\\">\\r\\n\\t\\t<d2p1:string>T:\\\\Bin\\\\AddInExtensions</d2p1:string>\\r\\n\\t........\\r\\n\\t<DBSyncInBuild>true</DBSyncInBuild>\\r\\n\\t<DatabaseServer>localhost</DatabaseServer>\\r\\n\\t<DefaultCompany></DefaultCompany>\\r\\n    // highlight-next-line\\r\\n\\t<DefaultModelForNewProjects>FleetManagement</DefaultModelForNewProjects>\\r\\n\\t<DefaultWebBrowser>Google Chrome</DefaultWebBrowser>\\r\\n\\t<DisableBPCheck>false</DisableBPCheck>\\r\\n\\t<DisableFormStaticCompile>false</DisableFormStaticCompile>\\r\\n\\t<EmitTraceEvents>true</EmitTraceEvents>\\r\\n\\t<EnableNativeDebugging>false</EnableNativeDebugging>\\r\\n\\t<EnableOfflineAuthentication>true</EnableOfflineAuthentication>\\r\\n\\t<EnableSymbolLoadingForSolutionOnly>true</EnableSymbolLoadingForSolutionOnly>\\r\\n\\t<FallbackToNativeSync>false</FallbackToNativeSync>\\r\\n\\t.......\\r\\n</DynamicsDevConfig>\\r\\n```"},{"id":"/2023/12/21/How-to-hide-New-and-Delete-buttons-in-form-1","metadata":{"permalink":"/blog/2023/12/21/How-to-hide-New-and-Delete-buttons-in-form-1","source":"@site/blog/2023-12-21-How-to-hide-New-and-Delete-buttons-in-form-1/index.md","title":"How to hide New and Delete buttons (command buttons) in form","description":"We can change the form design property Show Delete Button, Show New Button  to No.","date":"2023-12-21T00:00:00.000Z","tags":[{"inline":true,"label":"Self-Update","permalink":"/blog/tags/self-update"},{"inline":true,"label":"quality update","permalink":"/blog/tags/quality-update"}],"readingTime":0.21,"hasTruncateMarker":false,"authors":[{"name":"Max Nguyen","title":"FinOps Ranger","url":"/about","imageURL":"https://github.com/Dynamics365.png","key":"max"}],"frontMatter":{"date":"2023-12-21","title":"How to hide New and Delete buttons (command buttons) in form","categories":["D365Update"],"tags":["Self-Update","quality update"],"authors":"max"},"unlisted":false,"prevItem":{"title":"Set default model for Dynamics 365 Finance Operations project","permalink":"/blog/2023/12/26/set-default-model-for-d365-project"},"nextItem":{"title":"How to get FinOps Azure storage blob connection string","permalink":"/blog/2022/10/27/how-to-get-d365-azure-blob-storage-str"}},"content":"We can change the form design property `Show Delete Button`, `Show New Button`  to `No`.\\r\\n\\r\\n![Alt text](image.png)\\r\\n\\r\\nOr using X++ code in form\'s init method\\r\\n\\r\\n```cs\\r\\n[Form]\\r\\npublic class DEV_TestForm extends FormRun\\r\\n{\\r\\n    public void init()\\r\\n    {\\r\\n        this.form().design().showNewButton(0);\\r\\n        this.form().design().showDeleteButton(0);\\r\\n        super();\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\nFor COC Extension\\r\\n\\r\\n```cs\\r\\n[ExtensionOf(formStr(SMAServiceOrderTable))]\\r\\nfinal class SMAServiceOrderTable_Form_DEV_Extension\\r\\n{\\r\\n    public void init()\\r\\n    {\\r\\n        this.form().design().showNewButton(0);\\r\\n        this.form().design().showDeleteButton(0);\\r\\n        next init();\\r\\n    }\\r\\n}\\r\\n```"},{"id":"/2022/10/27/how-to-get-d365-azure-blob-storage-str","metadata":{"permalink":"/blog/2022/10/27/how-to-get-d365-azure-blob-storage-str","source":"@site/blog/2022-10-27-how-to-get-d365-azure-blob-storage-str/index.md","title":"How to get FinOps Azure storage blob connection string","description":"In Dynamics 365 for Finance and Operations Azure storage is used to","date":"2022-10-27T00:00:00.000Z","tags":[{"inline":true,"label":"Azure storage connection string","permalink":"/blog/tags/azure-storage-connection-string"}],"readingTime":0.5366666666666666,"hasTruncateMarker":false,"authors":[{"name":"Max Nguyen","title":"FinOps Ranger","url":"/about","imageURL":"https://github.com/Dynamics365.png","key":"max"}],"frontMatter":{"date":"2022-10-27","title":"How to get FinOps Azure storage blob connection string","categories":["Integration","Azure"],"tags":["Azure storage connection string"],"authors":"max"},"unlisted":false,"prevItem":{"title":"How to hide New and Delete buttons (command buttons) in form","permalink":"/blog/2023/12/21/How-to-hide-New-and-Delete-buttons-in-form-1"},"nextItem":{"title":"How to skip standard code in Dynamics 365 finance and operations","permalink":"/blog/2020/04/09/How-to-ignore-standard-code-in-Dynamics-365-finance-and-operations"}},"content":"In Dynamics 365 for Finance and Operations Azure storage is used to \\r\\n\\r\\n* Store files for [Attachments](https://learn.microsoft.com/en-us/dynamics365/fin-ops-core/fin-ops/organization-administration/configure-document-management)\\r\\n* [Data import and export jobs](https://learn.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/data-entities/data-import-export-job)\\r\\n*  When FinOps prints a report via [Document Reporting Services](https://learn.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/analytics/document-reporting-services?context=%2Fdynamics365%2Fcontext%2Fcommerce), SSRS Reporting Services generates an [EMF image](https://ax.docentric.com/printing-reports-with-custom-fonts-in-dynamics-365-for-finance-and-operations/) for each page of the generated document. FinOps then temporarily saves the generated EMF files to Azure Blob storage.\\r\\n*  [Printing archive](https://learn.microsoft.com/en-us/dynamicsax-2012/appuser-itpro/print-a-report-from-the-archive)\\r\\n\\r\\nAnd more!\\r\\n\\r\\nIf you are using tier 1 Cloud-Hosted environment, you can find the azure storage from the Azure resource group in Azure portal.\\r\\n\\r\\nFor tier 1, UAT tier 2, and PROD Tier 3, you can create a runnable class and execute to get the Azure storage connection string.\\r\\n\\r\\n```cs\\r\\nusing Microsoft.Dynamics.Clx.ServicesWrapper;\\r\\nclass GetAzureBlob\\r\\n{\\r\\n    public static void main(Args _args)\\r\\n    {\\r\\n        info(\'AzureStorageConnectionString = \' + CloudInfrastructure::GetCsuStorageConnectionString());\\r\\n        info(\'ClientCertificateThumbprint = \' + CloudInfrastructure::GetCsuClientCertificateThumbprint());\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\nOnce you have the connection string, you can connect it to [MS Azure Storage Explorer](https://docs.microsoft.com/en-us/azure/vs-azure-tools-storage-manage-with-storage-explorer?tabs=windows), Power Automate, or consuming in any framwork/language for integration/backup purposes."},{"id":"/2020/04/09/How-to-ignore-standard-code-in-Dynamics-365-finance-and-operations","metadata":{"permalink":"/blog/2020/04/09/How-to-ignore-standard-code-in-Dynamics-365-finance-and-operations","source":"@site/blog/2020-04-09-How-to-ignore-standard-code-in-Dynamics-365-finance-and-operations/index.md","title":"How to skip standard code in Dynamics 365 finance and operations","description":"Disclaimers: Try at your own risk, this is consider as a bug and it will be fixed soon.","date":"2020-04-09T00:00:00.000Z","tags":[{"inline":true,"label":"Chain of Command","permalink":"/blog/tags/chain-of-command"},{"inline":true,"label":"Dynamics 365 finance and operations","permalink":"/blog/tags/dynamics-365-finance-and-operations"},{"inline":true,"label":"skip standard code","permalink":"/blog/tags/skip-standard-code"}],"readingTime":1.7133333333333334,"hasTruncateMarker":false,"authors":[{"name":"Max Nguyen","title":"FinOps Ranger","url":"/about","imageURL":"https://github.com/Dynamics365.png","key":"max"}],"frontMatter":{"date":"2020-04-09T00:00:00.000Z","title":"How to skip standard code in Dynamics 365 finance and operations","tags":["Chain of Command","Dynamics 365 finance and operations","skip standard code"],"authors":"max","key":"How-to-ignore-standard-code-in-Dynamics-365-finance-and-operations"},"unlisted":false,"prevItem":{"title":"How to get FinOps Azure storage blob connection string","permalink":"/blog/2022/10/27/how-to-get-d365-azure-blob-storage-str"},"nextItem":{"title":"Set up a VHD for finance and operations apps","permalink":"/blog/2020/04/06/getting-onebox-vhd-dynamics-365-finance-and-operations-virtual-machine"}},"content":":::caution\\r\\nDisclaimers: Try at your own risk, this is consider as a bug and it will be fixed soon.\\r\\n:::\\r\\n\\r\\nAccording to this MS article about Chain Of Command https://docs.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/extensibility/method-wrapping-coc#wrapper-methods-must-always-call-next\\r\\n\\r\\n> \\"Wrapper methods must always call next Wrapper methods in an extension class must always call next, so that the next method in the chain and, finally, the original implementation are always called. This restriction helps guarantee that every method in the chain contributes to the result. In the current implementation of this restriction, the call to next must be in the first-level statements in the method body.\\"\\r\\n\\r\\nSo as described in the article, the Chain Of Command in Dynamics 365 finance and operations is used to add the logic before or after a method of a class is invoked and the original method will always be executed due to the compulsory of the next statement.\\r\\nWhen doing some implementations, we found out that there is a tricky way to completely **ignore** the execution of the original method of the class that is extended.\\r\\n\\r\\nPlease see below for more details:\\r\\nFor example, I created a project and add a new runnable class named Alex:\\r\\n\\r\\n```cs\\r\\nclass TestClass\\r\\n{\\r\\n    public static void main(Args _args)\\r\\n    {\\r\\n        throw error (\\"Hello World\\");\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\nWhen this class runs, a _Hello World_ info message will be displayed in the FinOps UI. Then I used chain of command to create Alex_Extension class that extends this class and \\"override\\" the main method of the Alex\'s class by putting the next call into another method and never call it like this:\\r\\n\\r\\n```cs\\r\\n[ExtensionOf(classStr(TestClass))]\\r\\nfinal class Alex_Extension\\r\\n{\\r\\n    public static void main(Args _args)\\r\\n    {\\r\\n        //Implement something here\\r\\n        info (\\"Ok\\");\\r\\n        void ignore()\\r\\n        {\\r\\n            next main(_args);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\nWhen I run the _AlexExtension_, the original main method of the Alex class will be ignored and only the additional block of code that I wrote in the _AlexExtension_ class will be executed, so only the **OK** info will appear.\\r\\n\\r\\nNow we will try with a sample scenario from D365 Finance and Operation. In **General Ledger** Module, we have **General journals** form\\r\\n\\r\\n![Image](How-to-ignore-standard-code-in-Dynamics-365-finance-and-operations.png)\\r\\n\\r\\nWhen you click the button for **Journal Print**, the menu item will be triggered and point to the controller name: *LedgerJournalController* with *LedgerJournalController* class and the report will be generated.\\r\\n\\r\\nI will use COC to \u201coverride\u201d the main method of *LedgerJournalController* class by applying the method above:\\r\\n\\r\\n```cs\\r\\n[ExtensionOf(classStr(LedgerJournalController))]\\r\\nfinal class Alex_LedgerJournalController_Extension\\r\\n{\\r\\n    public static void main(Args _args)\\r\\n    {\\r\\n        info(\\"ok\\");\\r\\n        void ignore_first()\\r\\n        {\\r\\n            next main(_args);\\r\\n        }\\r\\n    }\\r\\n} \u2003\\r\\n```\\r\\n\\r\\nUsing this I will ignore the the main method of *LedgerJournalController* class and instead of generate the report, the result will be only the **OK** info line in the extension class:\\r\\n\\r\\n![Image](How-to-ignore-standard-code-in-Dynamics-365-finance-and-operations-1.png)\\r\\n\\r\\nThis is a little bit tricky because we still call next in our extension class as per the requirement of COC, but as we never call the method that \\"wrap\\" the next call so it will not be executed. You can try this to simply ignore or rewrite a method of a class in FinOps.\\r\\n\\r\\nThank you for reading."},{"id":"/2020/04/06/getting-onebox-vhd-dynamics-365-finance-and-operations-virtual-machine","metadata":{"permalink":"/blog/2020/04/06/getting-onebox-vhd-dynamics-365-finance-and-operations-virtual-machine","source":"@site/blog/2020-04-06-getting-onebox-vhd-dynamics-365-finance-and-operations-virtual-machine/index.md","title":"Set up a VHD for finance and operations apps","description":"1. Download Dynamics 365 finance and operations VHD files","date":"2020-04-06T00:00:00.000Z","tags":[{"inline":true,"label":"onebox vhd","permalink":"/blog/tags/onebox-vhd"},{"inline":true,"label":"Dynamics 365 finance and operations","permalink":"/blog/tags/dynamics-365-finance-and-operations"},{"inline":true,"label":"upgrade","permalink":"/blog/tags/upgrade"},{"inline":true,"label":"LCS","permalink":"/blog/tags/lcs"},{"inline":true,"label":"OneBox","permalink":"/blog/tags/one-box"}],"readingTime":4.27,"hasTruncateMarker":true,"authors":[{"name":"Max Nguyen","title":"FinOps Ranger","url":"/about","imageURL":"https://github.com/Dynamics365.png","key":"max"}],"frontMatter":{"date":"2020-04-06T00:00:00.000Z","last_update":{"date":"12/12/2023","author":"max"},"title":"Set up a VHD for finance and operations apps","tags":["onebox vhd","Dynamics 365 finance and operations","upgrade","LCS","OneBox"],"categories":["FinOps","Troubleshooting","Onebox"],"authors":"max"},"unlisted":false,"prevItem":{"title":"How to skip standard code in Dynamics 365 finance and operations","permalink":"/blog/2020/04/09/How-to-ignore-standard-code-in-Dynamics-365-finance-and-operations"},"nextItem":{"title":"Create Purchase Orders - Confirm - Product receipt - Post using X++ in Dynamics 365 Finance & Operations","permalink":"/blog/2020/01/25/create-po-confirm-receipt-post"}},"content":"## 1. Download Dynamics 365 finance and operations VHD files\\r\\n\\r\\n* Go to the LCS main page and select **Shared asset library** or go to Shared Asset Library.\\r\\n\\r\\n* Select the asset type **Downloadable VHD**.\\r\\n\\r\\n* Find the VHD you are looking for based on the desired Finance and Operation version. The VHD is divided into multiple file parts that you need to download. For example, the asset files that start with \\"VHD - 10.0.5\\" are the different files you need in order to install version 10.0.5.\\r\\n\\r\\n* Download all files (parts) associated with the desired VHD to a local folder.\\r\\n\\r\\n* After the download is complete, run the executable file that you downloaded, accept the software license agreement, and choose a file path to extract the VHD to.\\r\\n\\r\\n* This creates a local VHD file that you can use to run a local virtual machine.\\r\\n\\r\\n* Sign in to the VM by using the following credentials:\\r\\n\\r\\n  * User name: **Administrator**\\r\\n  * Password: **pass@word1**\\r\\n\x3c!--truncate--\x3e\\r\\n* Provision the administrator user.\\r\\n\\r\\n:::tip\\r\\nFor security reasons the reply URL setup for AAD was changed, The `Admin user provisioning tool` is deleted from 10.0.24 **cloud hosted** VM. More info here https://learn.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/dev-tools/access-instances#frequently-asked-questions.\\r\\n\\r\\nYou still have it in the VHD machine.\\r\\n:::\\r\\n\\r\\n## 2. Extend the Evaluattion license\\r\\n\\r\\n* Run cmd with Admin right.\\r\\n* Run `slmgr -dli` to check the current period status.\\r\\n\\r\\n```powershell title=\\"slmgr -dli\\"\\r\\nName: Windows(R), ServerDatacenterEval edition\\r\\nDescription: Windows(R) Operating System, TIMEBASED_EVAL channel\\r\\nPartial Product Key: H6F8M\\r\\nLicense Status: Licensed\\r\\nTimebased activation expiration: 259199 minute(s) (180 day(s))\\r\\n```\\r\\n\\r\\n* Run `slmgr \u2013rearm` to extend the evaluation period.\\r\\n* Run `slmgr \u2013dlv` to see how many extensions do you have left. You can only extend the license a limited number of times.\\r\\n\\r\\n## 3. Rename VM\\r\\n\\r\\n:::tip Update 2023\\r\\nFrom the VHD 10.0.29 version, the VHD name named with the version of it own, before that the computer name always **MININT-F36S5EH**. So we don\'t have to remane the VM everytime we deploy a new VHD.\\r\\n![VHD 10.0.29](DVHD10029.png \\"VHD 10.0.29\\")\\r\\n:::\\r\\n\\r\\n:::info Reference\\r\\nhttps://learn.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/migration-upgrade/vso-machine-renaming\\r\\n:::\\r\\n\\r\\n* Rename and restart the machine before you start development or connect to Azure DevOps.\\r\\n* Update the server name in SQL Server\\r\\n\\r\\n  * The default credential for SQL server is **axdbadmin** and password **AOSWebSite@12**\\r\\n  \\r\\nYou can also see the password (`DataAccess.AxAdminSqlPwd`) in the `C:\\\\AOSService\\\\webroot\\\\web.config`\\r\\n\\r\\nTo decrypt run this command:\\r\\n\\r\\n```powershell\\r\\nC:\\\\AOSService\\\\webroot\\\\bin\\\\Microsoft.Dynamics.AX.Framework.ConfigEncryptor.exe -decrypt C:\\\\AOSService\\\\webroot\\\\web.config\\r\\n```\\r\\n\\r\\nTo encrypt run this command:\\r\\n\\r\\n`C:\\\\AOSService\\\\webroot\\\\bin\\\\Microsoft.Dynamics.AX.Framework.ConfigEncryptor.exe -encrypt C:\\\\AOSService\\\\webroot\\\\web.config`\\r\\n\\r\\nIf you see the error\\r\\n\\r\\n:::danger error\\r\\n   No certificate found for id \'7366E25DC94FA8A400FA0037FFF3BB300D9482D4\'\\r\\n:::\\r\\n\\r\\nPlease follow [this step](#7-for-vhd-that-was-released-for-versions-10024-and-later) first.\\r\\n\\r\\n* Run following query\\r\\n\\r\\n    ```sql title=\\"MININT-57EHFHJ\\"\\r\\n    sp_dropserver [old_name]\\r\\n    sp_addserver [new_name], local\\r\\n    ```\\r\\n\\r\\n\\r\\nIn these commands, be sure to replace old_name with the old name of the server and new_name with the new name. By default, the old name is `MININT-F36S5EH`, but you can run select @@servername to get the old name. Additionally, be sure to restart the SQL Server service after the commands have finished running.\\r\\n\\r\\n\\r\\n* Restart SQL service\\r\\n\\r\\n* Open Reporting Services Configuration Manager for SQL Server 2016, then **Select Database**, select **Change Database**, and use the new server name.\\r\\n\\r\\n### Update financial reporting\\r\\n\\r\\nGo to LCS portal and download a one version package, we will need the scripts from it. Open a Microsoft Windows PowerShell command window as an admin, and run the following command. This command contains the default passwords that might have to be updated. Be sure to replace **new_name** with the new name.\\r\\n\\r\\n```powershell showLineNumbers\\r\\ncd <update folder>\\\\MROneBox\\\\Scripts\\\\Update\\\\ConfigureMRDatabase.ps1 -NewAosDatabaseName AxDB -NewAosDatabaseServerName new_name -NewMRDatabaseName ManagementReporter -NewAxAdminUserPassword AOSWebSite@123 -NewMRAdminUserName MRUser -NewMRAdminUserPassword MRWebSite@123 -NewMRRuntimeUserName MRUSer -NewMRRuntimeUserPassword MRWebSite@123 -NewAxMRRuntimeUserName MRUser -NewAxMRRuntimeUserPassword MRWebSite@123\\r\\n```\\r\\n\\r\\n```js showLineNumbers\\r\\nconsole.log(\'Every repo must come with a mascot.\');\\r\\n```\\r\\n\\r\\n```csharp showLineNumbers\\r\\nCustTable custTable = CustTable::find(serviceOrderTable.CustAccount);\\r\\nCSG_CorrigoProUpdate corrigoProUpdate;\\r\\n\\r\\nif((custTable.AccountNum == serviceOrderTable.CustAccount)\\r\\n    && CSG_CorrigoProTable::Exist(custTable.CSGMasterAccount)\\r\\n    && serviceOrderTable.CSGCustomerPO != \'\'\\r\\n    && ((serviceOrderReason.StageId == \'Started\'\\r\\n    || serviceOrderReason.StageId == \'Susp-Other\'\\r\\n    || serviceOrderReason.StageId == \'Susp-Parts\'\\r\\n    || serviceOrderReason.StageId == \'Susp-Sched\'\\r\\n    || serviceOrderReason.StageId == \'Complete\'))\\r\\n    && serviceOrderReason.Description != \'Travel Back\')\\r\\n{\\r\\n    ttsbegin;\\r\\n    corrigoProUpdate.selectForUpdate();\\r\\n    corrigoProUpdate.AccountNum = serviceOrderTable.CustAccount;\\r\\n    corrigoProUpdate.CSGMasterAccount = custTable.CSGMasterAccount;\\r\\n    corrigoProUpdate.ServiceOrderId = serviceOrderReason.ServiceOrderId;\\r\\n    corrigoProUpdate.CustomerPO = serviceOrderTable.CSGCustomerPO;\\r\\n    corrigoProUpdate.ObjectName = #ObjectName;\\r\\n    corrigoProUpdate.StageId = serviceOrderReason.StageId;\\r\\n    corrigoProUpdate.Progress = serviceOrderTable.Progress;\\r\\n    corrigoProUpdate.Technician = HcmWorker::find(serviceOrderTable.WorkerResponsible).name();\\r\\n\\r\\n    //With condition already in the custom method docuRef.Name = \'Tech Notes\'\\r\\n    corrigoProUpdate.Notes = DocuRef::csgFirstonly1Note(\'csg\', 287, serviceOrderTable.RecId, \'Tech Notes\');\\r\\n        \\r\\n    corrigoProUpdate.ServiceDateUtc = serviceOrderTable.ServiceDateTime;\\r\\n    corrigoProUpdate.ActionDateUtc = serviceOrderReason.CSGDateTimeExecuted;\\r\\n    corrigoProUpdate.insert();\\r\\n    ttscommit;\\r\\n}\\r\\n```\\r\\n\\r\\n### Update the Azure Storage Emulator\\r\\n\\r\\n* From the Start menu, open Microsoft Azure Storage Emulator - v4.0, and run the following commands.\\r\\n\\r\\n    ```AzureStorageEmulator.exe start```\\r\\n\\r\\n  > If you got an error **_Port conflict with existing application_**, please check this [post](/operation/troubleshooting/2020-04-05-azure-storage-emulator-port-conflict-with-existing-application).\\r\\n\\r\\n* This command verifies that the emulator is running.\\r\\n\\r\\n    ```AzureStorageEmulator.exe status```\\r\\n\\r\\n* Update the server name\\r\\n\\r\\n    ```AzureStorageEmulator.exe init -server new_name```\\r\\n\\r\\nFor more information about Azure storage emulator please follow https://docs.microsoft.com/en-us/azure/storage/common/storage-use-emulator\\r\\n\\r\\n## 4. Location of packages, source code, and other AOS configurations\\r\\n\\r\\nOn a VM, you can find most of the application configuration by opening the web.config file of AOSWebApplication.\\r\\n\\r\\n1. Start IIS.\\r\\n\\r\\n2. Go to _Sites > AOSWebApplication_.\\r\\n\\r\\n3. Right-click, and then click **Explore** to open File Explorer.\\r\\n\\r\\n4. Open the **web.config** file in Notepad or another text editor. The following keys are of interest to many developers and administrators:\\r\\n\\r\\n    * **Aos.MetadataDirectory** \u2013 This key points to the location of the packages folder that contains platform and application binaries, and also source code. (Source code is available only in development environments.) Typical values are: `c:\\\\packages`, `c:\\\\AosServicePackagesLocalDirectory`, and `J:AosServicePackagesLocalDirectory`.\\r\\n\\r\\n    * **DataAccess.Database** \u2013 This key holds the name of the database.\\r\\n\\r\\n    * **Aos.AppRoot** \u2013 This key points to the root folder of the Application Object Server (AOS) web application.\\r\\n\\r\\n## 5. Redeploying or restarting the runtime on the VM\\r\\n\\r\\nTo restart the local runtime and redeploy all the packages, follow these steps.\\r\\n\\r\\n1. Open File Explorer, and go to `C:\\\\CustomerServiceUnit`.\\r\\n\\r\\n2. Right-click **AOSDeploy.cmd**, and then click **Run as administrator**.\\r\\n\\r\\nThis process might take a while. The process is completed when the cmd.exe window closes. If you just want to restart AOS (without redeploying the runtime), run iisreset from an administrator Command Prompt window, or restart AOSWebApplication from IIS.\\r\\n\\r\\n## 6. Update to the latest version\\r\\n\\r\\nPlease check this [document](https://docs.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/deployment/install-deployable-package) for versions 10.0.24\\r\\n\\r\\n## 7. For (VHD) that was released for versions 10.0.24 and later\\r\\n\\r\\n### 7.1 Register a new application in Azure Active Directory\\r\\n\\r\\nTo register a new application in Microsoft Azure Active Directory (Azure AD), follow the steps outlined in [Register app or web API](https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-register-app). The new app registration should be for a web application, and the following redirect URIs should be added:\\r\\n\\r\\n* `https://usnconeboxax1aos.cloud.onebox.dynamics.com/`\\r\\n* `https://usnconeboxax1aos.cloud.onebox.dynamics.com/oauth/`\\r\\n\\r\\nOnce created, make note of the **Application (client) ID**.\\r\\n\\r\\n### 7.2 Run the setup script\\r\\n\\r\\nAfter you sign in with the **Administrator** account, right-click the desktop shortcut **Generate Self-Signed Certificates**, and select **Run as administrator**. When the script prompts for the application ID, provide the **Application (client) ID** created in Azure Active Directory.\\r\\n\\r\\nWhen the script finishes, the environment is ready for use. At this time, you can run the Admin Provisioning tool to set the administrator account, permissions, and tenant. Make sure that the email provided is for the Azure Active Directory tenant in which the application registration was created.\\r\\n\\r\\n## 8. For (VHD) that was released for versions 10.0.39\\r\\n\\r\\nYou will get this error when starting the Dynamics 365 client.\\r\\n\\r\\n:::danger error\\r\\nAADSTS700016: Application with identifier \'b0cdba4e-ada9-4ef7-83ba-590322d2c529\' was not found in the directory \'Test_Test_ContosoAX\'. This can happen if the application has not been installed by the administrator of the tenant or consented to by any user in the tenant. You may have sent your authentication request to the wrong tenant.\\r\\n:::\\r\\n\\r\\nYou can locate the **admin provisioning tool** from `C:\\\\AOSService\\\\PackagesLocalDirectory\\\\bin`, run it with admin right and polulate your email account, once it\'s done, you will be able to access the client.\\r\\nMore about **admin provisioning tool** [here](/operation/tools/2022-09-18-admin-provisioning-tools)."},{"id":"/2020/01/25/create-po-confirm-receipt-post","metadata":{"permalink":"/blog/2020/01/25/create-po-confirm-receipt-post","source":"@site/blog/2020-01-25-create-po-confirm-receipt-post/index.md","title":"Create Purchase Orders - Confirm - Product receipt - Post using X++ in Dynamics 365 Finance & Operations","description":"The script will work for Dynamics 365 Finance & Operations version","date":"2020-01-25T00:00:00.000Z","tags":[{"inline":true,"label":"Create Purchase order X++","permalink":"/blog/tags/create-purchase-order-x"},{"inline":true,"label":"Coding","permalink":"/blog/tags/coding"},{"inline":true,"label":"integration","permalink":"/blog/tags/integration"}],"readingTime":1.25,"hasTruncateMarker":false,"authors":[{"name":"Max Nguyen","title":"FinOps Ranger","url":"/about","imageURL":"https://github.com/Dynamics365.png","key":"max"}],"frontMatter":{"date":"2020-01-25T00:00:00.000Z","title":"Create Purchase Orders - Confirm - Product receipt - Post using X++ in Dynamics 365 Finance & Operations","tags":["Create Purchase order X++","Coding","integration"],"categories":["FinOps","XPP","Integration"],"authors":"max"},"unlisted":false,"prevItem":{"title":"Set up a VHD for finance and operations apps","permalink":"/blog/2020/04/06/getting-onebox-vhd-dynamics-365-finance-and-operations-virtual-machine"}},"content":"> The script will work for Dynamics 365 Finance & Operations version\\r\\n\\r\\n```cs\\r\\nclass MaxGeneratePO\\r\\n{\\r\\n    public static void main(Args _args)\\r\\n    {\\r\\n        int i = 0; // number of purchase orders\\r\\n        NumberSeq numberSeq;\\r\\n        PurchTable purchTable;\\r\\n        PurchLine purchLine;\\r\\n        InventDim inventDim;\\r\\n\\r\\n        while (i <= 3)\\r\\n        {\\r\\n            ttsBegin;\\r\\n            MaxGeneratePO createPO = new MaxGeneratePO();\\r\\n            numberSeq = NumberSeq::newGetNum(PurchParameters::numRefPurchId());\\r\\n            numberSeq.used();\\r\\n            purchTable.PurchId = numberSeq.num();\\r\\n            purchTable.initValue();\\r\\n            purchTable.initFromVendTable(VendTable::find(\'US-101\'));\\r\\n\\r\\n            if (!purchTable.validateWrite())\\r\\n            {\\r\\n                throw Exception::Error;\\r\\n            }\\r\\n\\r\\n            purchTable.insert();\\r\\n            inventDim.clear();\\r\\n            purchLine.clear();\\r\\n            purchLine.initValue();\\r\\n\\r\\n            purchLine.PurchId = purchTable.PurchId;\\r\\n            purchLine.ItemId = \'D0002\';\\r\\n            inventDim.InventSiteId = \\"1\\";\\r\\n            inventDim.InventLocationId = \\"11\\";\\r\\n            purchLine.InventDimId=InventDim::findOrCreate(inventDim).inventDimId ;\\r\\n            purchLine.createLine(true, true, true, true, true, true);\\r\\n\\r\\n            purchLine.PurchQty = 5;\\r\\n            purchLine.PurchUnit = \\"ea\\";\\r\\n            purchLine.PurchPrice = createPO.randomAmount(); // get random amount nubmer\\r\\n            purchLine.LineAmount = purchLine.calcLineAmount();\\r\\n            purchLine.update();\\r\\n            \\r\\n            //PO confirm\\r\\n            PurchFormLetter purchFormLetter;\\r\\n            PurchFormLetter purchFormLetterPack;\\r\\n            purchFormLetter = PurchFormLetter::construct(DocumentStatus::PurchaseOrder);\\r\\n            purchFormLetter.update(purchTable,\\r\\n                                strFmt(\\"ConNum_%1\\", purchTable.PurchId),\\r\\n                                systemDateGet(),\\r\\n                                PurchUpdate::All,\\r\\n                                AccountOrder::None,\\r\\n                                NoYes::No,\\r\\n                                NoYes::no);\\r\\n            //Product receipt\\r\\n            createPO.proceed(purchTable.PurchId, purchLine.ItemId,purchLine.InventDimId,purchLine.PurchQty,strFmt(\\"RptNum_%1\\", purchTable.PurchId));\\r\\n            //Post PO\\r\\n            createPO.postPOInvoice(purchTable.PurchId, strFmt(\\"RptNum_%1\\", purchTable.PurchId));\\r\\n\\r\\n            info(strFmt(\\"Purchase order \'%1\' has been created\\", purchTable.PurchId));\\r\\n            ttsCommit;\\r\\n            i++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    public boolean proceed(PurchId _purchId, ItemId _itemId,inventDimId _inventDimId, PurchQty _qty, PackingSlipId _productReceiptNumber)\\r\\n    {\\r\\n        return\\r\\n            this.generateProductReceipt(_purchId, this.addToPurchLineList(_purchId, _itemId, _inventDimId, _qty), _productReceiptNumber);\\r\\n    }\\r\\n\\r\\n    public boolean generateProductReceipt(PurchId _purchId, List _purchLineList, PackingSlipId _productReceiptNumber)\\r\\n    {\\r\\n        boolean ret = true;\\r\\n        PurchFormLetter purchFromLetter;\\r\\n        PurchTable purchTable = PurchTable::find(_purchId);\\r\\n\\r\\n        try\\r\\n        {\\r\\n            ttsbegin;\\r\\n            purchFromLetter = PurchFormLetter::construct(DocumentStatus::PackingSlip);\\r\\n            purchFromLetter.createFromLines(true);\\r\\n            purchFromLetter.parmLineList(_purchLineList.pack());\\r\\n            purchFromLetter.update(purchTable, _productReceiptNumber,\\r\\n                                DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),\\r\\n                                PurchUpdate::All);\\r\\n            ttscommit;\\r\\n        }\\r\\n        catch\\r\\n        {\\r\\n            ret = false;\\r\\n        }\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n    public List addToPurchLineList(PurchId _purchId, ItemId _itemId,inventDimId _inventDimId, PurchQty _qty)\\r\\n    {\\r\\n        List purchLineList = new List(Types::Record);\\r\\n        PurchLine purchLine = PurchLine::findItemIdInventDimId(_purchId, _itemId, _inventDimId);\\r\\n\\r\\n        if(purchLine && _qty > 0)\\r\\n        {\\r\\n            purchLine.PurchReceivedNow = _qty;\\r\\n            purchline.modifiedField(fieldNum(PurchLine, PurchReceivedNow));\\r\\n            purchLineList.addEnd(purchLine);\\r\\n        }\\r\\n        return purchLineList;\\r\\n    }\\r\\n\\r\\n    public void postPOInvoice(PurchId purchId, PackingSlipId packingSlipId)\\r\\n    {\\r\\n        TmpFrmVirtual               tmpFrmVirtualVend;\\r\\n        PurchFormLetter_Invoice     purchFormLetter;\\r\\n        VendPackingSlipJour         vendPackingSlipJour;\\r\\n        SysQueryRun                 chooseLinesQuery;\\r\\n        SysQueryRun                 chooseLinesPendingInvoiceQuery;\\r\\n        container                   conTmpFrmVirtual;\\r\\n        List                        selectedList    = new List(Types::Record);\\r\\n\\r\\n        select firstonly vendPackingSlipJour\\r\\n                    where vendPackingSlipJour.PurchId == purchId\\r\\n            && vendPackingSlipJour.PackingSlipId == packingSlipId;\\r\\n\\r\\n        if (vendPackingSlipJour)\\r\\n        {\\r\\n            tmpFrmVirtualVend.clear();\\r\\n            tmpFrmVirtualVend.TableNum  = vendPackingSlipJour.TableId;\\r\\n            tmpFrmVirtualVend.RecordNo  = vendPackingSlipJour.RecId;\\r\\n            tmpFrmVirtualVend.NoYes     = NoYes::Yes;\\r\\n            tmpFrmVirtualVend.Id        = vendPackingSlipJour.PurchId;\\r\\n            tmpFrmVirtualVend.insert();\\r\\n        }\\r\\n\\r\\n        chooseLinesQuery = new SysQueryRun(queryStr(PurchUpdate));\\r\\n        chooseLinesQuery.query().addDataSource(tableNum(VendInvoiceInfoTable)).enabled(false);\\r\\n\\r\\n        // chooseLinesPendingInvoiceQuery needs to be initialized, although it will not be used\\r\\n        chooseLinesPendingInvoiceQuery = new SysQueryRun(queryStr(PurchUpdatePendingInvoice));\\r\\n        chooseLinesPendingInvoiceQuery.query().dataSourceTable(tableNum(PurchTable)).addRange(fieldNum(PurchTable,PurchId)).value(queryValue(\'\'));\\r\\n           \\r\\n        purchFormLetter = PurchFormLetter::construct(DocumentStatus::Invoice);\\r\\n        purchFormLetter.chooseLinesQuery (chooseLinesQuery);\\r\\n        purchFormLetter.parmQueryChooseLinesPendingInvoice(chooseLinesPendingInvoiceQuery);\\r\\n        purchFormLetter.purchTable (PurchTable::find(PurchId));\\r\\n        purchFormLetter.transDate (systemDateGet());\\r\\n        purchFormLetter.parmParmTableNum (strFmt(\\"%1\\",packingSlipId)); //This is invoice number\\r\\n        purchFormLetter.printFormLetter (NoYes::No);\\r\\n        purchFormLetter.sumBy (AccountOrder::Auto);\\r\\n        purchFormLetter.specQty (PurchUpdate::PackingSlip);\\r\\n      \\r\\n        while select tmpFrmVirtualVend\\r\\n        {\\r\\n            selectedList.addEnd(tmpFrmVirtualVend);\\r\\n            conTmpFrmVirtual = selectedList.pack();\\r\\n        }\\r\\n        purchFormLetter.selectFromJournal(conTmpFrmVirtual);\\r\\n        purchFormLetter.reArrangeNow(true);\\r\\n        purchFormLetter.run();\\r\\n    }\\r\\n\\r\\n    public int randomAmount()\\r\\n    {\\r\\n        RandomGenerate randomGenerate;\\r\\n        randomGenerate = RandomGenerate::construct();\\r\\n        randomGenerate.parmSeed(new Random().nextInt());\\r\\n        return RandomGenerate.randomInt(100, 800);\\r\\n    }\\r\\n\\r\\n}\\r\\n```\\r\\n\\r\\nThank you for reading."}]}}')}}]);