"use strict";(self.webpackChunknuxulutest=self.webpackChunknuxulutest||[]).push([[7522],{52910:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>m});var t=n(74848),i=n(28453);const a={title:"Useful functions to use in AX 2012",description:"Useful functions to use in AX 2012",date:new Date("2016-12-30T00:00:00.000Z"),categories:["AX2012"],tags:["xpp"],toc:{enable:!1,auto:!1}},s=void 0,l={id:"development/xpp-sample/2016-12-30-useful-functions-to-use-in-ax-2012/index",title:"Useful functions to use in AX 2012",description:"Useful functions to use in AX 2012",source:"@site/docs/03-development/01-xpp-sample/2016-12-30-useful-functions-to-use-in-ax-2012/index.md",sourceDirName:"03-development/01-xpp-sample/2016-12-30-useful-functions-to-use-in-ax-2012",slug:"/development/xpp-sample/2016-12-30-useful-functions-to-use-in-ax-2012/",permalink:"/docs/development/xpp-sample/2016-12-30-useful-functions-to-use-in-ax-2012/",draft:!1,unlisted:!1,tags:[{inline:!0,label:"xpp",permalink:"/docs/tags/xpp"}],version:"current",lastUpdatedBy:"Luan Nguyen",lastUpdatedAt:1701636614e3,frontMatter:{title:"Useful functions to use in AX 2012",description:"Useful functions to use in AX 2012",date:"2016-12-30T00:00:00.000Z",categories:["AX2012"],tags:["xpp"],toc:{enable:!1,auto:!1}},sidebar:"tutorialSidebar",previous:{title:"Posting cust payment journal using X++ Dynamics AX 2012",permalink:"/docs/development/xpp-sample/2016-12-26-posting-cust-payment-journal-using-x++/"},next:{title:"Difference between QueryFilter and QueryBuildRrange",permalink:"/docs/development/xpp-sample/2017-01-01-Difference-between-QUERYFILTER-and-QUERYBUILDRANGE/"}},o={},m=[];function d(e){const r={code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.p,{children:"Useful functions to use in AX 2012"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-C#",children:"public static container list2Con (List _list)\r\n{\r\n    container con;\r\n    ListEnumerator listEnum;\r\n\r\n    listEnum = _list.getEnumerator();\r\n\r\n    while (listEnum.moveNext())\r\n    {\r\n        con += listEnum.current();\r\n    }\r\n\r\n    return con;\r\n}\r\n\r\n///Creates a file named _file with the content specified in _content parameter.\r\n//See the class SysImportUtil class for file related functions like get temfolder,tempfilename..etc.\r\npublic static void createFile(str _file, str _content)\r\n{\r\n    #File\r\n    TextIo file = null;\r\n    ;\r\n    new FileIOPermission(_file, #io_write).assert();\r\n\r\n    // BP Deviation Documented\r\n    file = new TextIo(_file, #io_write);\r\n    file.write(_content);\r\n    file.finalize();\r\n}\r\n\r\n///Creates an XML file named _file with the content specified in _content parameter. If the XML file\r\n///can't be created then it will try to create a normal file by calling createFile method.\r\npublic static void createXmlFile(str _file, str _content)\r\n{\r\n    #File\r\n\r\n    XmlDocument document = null;\r\n    ;\r\n    try\r\n    {\r\n        document = XmlDocument::newXml(_content, false);\r\n\r\n        new FileIOPermission(_file, #io_write).assert();\r\n        // BP Deviation Documented\r\n        document.save(_file);\r\n    }\r\n    catch\r\n    {\r\n        SysImportUtil::createFile(_file, _content);\r\n    }\r\n}\r\n\r\n///Reads an XML file specified by _file parameter.\r\npublic static str readXmlFile(str _file)\r\n{\r\n    #File\r\n\r\n    XmlDocument file = null;\r\n    ;\r\n    try\r\n    {\r\n        new FileIOPermission(_file, #io_read).assert();\r\n        // BP Deviation Documented\r\n        file = XmlDocument::newFile(_file);\r\n        return file.xml();\r\n    }\r\n    catch\r\n    {\r\n        return '';\r\n    }\r\n}\r\n\r\n/// <summary>\r\n/// Opens Bing maps with the address.\r\n/// </summary>\r\n/// <param name=\"_address\">\r\n/// The address to map.\r\n/// </param>\r\npublic static void mapIt(LogisticsPostalAddress _address)\r\n{\r\n    #DEFINE.MapURL('http://maps.bing.com/default.aspx?where1=\\%1')\r\n    #DEFINE.comma(',')\r\n    #DEFINE.newLine('\\n')\r\n\r\n    str     address;\r\n    ;\r\n    if (_address)\r\n    {\r\n        address = _address.Street + #comma +\r\n                  _address.City + #comma +\r\n                  _address.State + #comma +\r\n                  _address.ZipCode + #comma +\r\n                  _address.CountryRegionId;\r\n\r\n        // Replace the newline with comma\r\n        address = strReplace(address, #newline, #comma);\r\n        // URL encode\r\n        address = System.Web.HttpUtility::UrlEncode(address);\r\n        // Add the address to the URL\r\n        infolog.urlLookup(strFmt(#MapURL, address));\r\n    }\r\n}\r\n\r\n\r\n\r\n/// <summary>\r\n/// Function to get the list of Tables in AOT\r\n/// </summary>\r\n/// <returns>\r\n/// In case the table is derived its parent i.e. base table is appended to it delimited by comma (,)\r\n/// Output example\r\n/// :Table1,Table1's Base Table : Table2 : Table3 : Table4 , Table4's Base Table\r\n/// </returns>\r\nstatic str getAOTTables()\r\n{\r\n    TreeNode            node;\r\n    TreeNode            childNode;\r\n    TreeNodeIterator    nodeIt;\r\n    FilePath            path;\r\n    TableId             tableId;\r\n    Dictionary      dict = new Dictionary();\r\n    str parentName;\r\n    str fieldArr;\r\n\r\n    path        = @'\\Data dictionary\\Tables';\r\n    node        = TreeNode::findNode(path);\r\n    nodeIt      = node.AOTiterator();\r\n    childNode   = nodeIt.next();\r\n    fieldArr ='';\r\n    while(childNode)\r\n    {\r\n        tableId = tableName2id(childNode.treeNodeName());\r\n\r\n        if ( !dict.tableObject(tableId).isTmp()  && !dict.tableObject(tableId).isMap() && !dict.tableObject(tableId).isView())\r\n        {\r\n            parentName = RetailUtils::getAOTTableParentName(tableId);\r\n            if (parentName)\r\n            {\r\n                //Creating formated output , refer explaination and example on header\r\n                fieldArr = fieldArr + ':' + strUpr(childNode.treeNodeName()) + \",\" + strUpr(parentName);\r\n            }\r\n            else\r\n            {\r\n                fieldArr = fieldArr + ':' + strUpr(childNode.treeNodeName());\r\n            }\r\n        }\r\n        childNode = nodeIt.next();\r\n    }\r\n    return fieldArr;\r\n}\r\n\r\n\r\n/// <summary>\r\n/// This method receives a table id and find the corresponding Base Table from AOT\r\n/// This method takes care of Multilevel inheritence\r\n/// </summary>\r\n/// <param name=\"tableid\">\r\n/// tableid of derived table.\r\n/// </param>\r\n/// <returns>\r\n/// Name of parent table.\r\n/// </returns>\r\nstatic str getAOTTableParentName(TableId tableid)\r\n{\r\n    Dictionary  dict = new Dictionary();\r\n    TableId parentId, temp;\r\n    str result;\r\n\r\n    parentId = dict.tableObject(tableid).extends();\r\n\r\n    // Loop until reached to the table for whcih Extends property is not defined\r\n    while (parentId)\r\n    {\r\n        temp = dict.tableObject(parentId).extends();\r\n        if (temp)\r\n        {\r\n            parentId = temp;\r\n        }\r\n        else\r\n        {\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (parentId)\r\n    {\r\n        result = tableId2name(parentId);\r\n    }\r\n    else\r\n    {\r\n        result = '';\r\n    }\r\n    return result;\r\n}\r\n\r\n\r\n/// <summary>\r\n/// Function to accepts a table name and returns all its field\r\n/// </summary>\r\n/// <param name=\"tableName\">\r\n/// Table name for which field are to be retreived.\r\n/// </param>\r\n/// <returns>\r\n/// Field are arranged in a : delimited string and passed back\r\n/// Fields are read from AOT structure and defaults field are manually added\r\n/// as those are not present in the tree structure\r\n/// Example =  :Field1:Field2:Field3:Field4\r\n/// </returns>\r\nstatic str getAOTTableFields(str tableName)\r\n{\r\n    TreeNode            node;\r\n    TreeNode            childNode;\r\n    TreeNodeIterator    nodeIt;\r\n    FilePath            path;\r\n    TableId             tableId;\r\n    str fieldArr;\r\n    Dictionary      dict = new Dictionary();\r\n    fieldArr = '';\r\n\r\n    if (!tableName)\r\n    {\r\n        return fieldArr;\r\n    }\r\n\r\n    // Construct the path till table fields node\r\n    path        = @'\\Data dictionary\\Tables\\\\' + tableName + '\\\\Fields' ;\r\n    node        = TreeNode::findNode(path);\r\n    nodeIt      = node.AOTiterator();\r\n    childNode   = nodeIt.next();\r\n\r\n    while(childNode)\r\n    {\r\n        fieldArr =  fieldArr + ':' + strUpr(childNode.treeNodeName());\r\n        childNode = nodeIt.next();\r\n    }\r\n\r\n    tableId = tableName2id(tableName);\r\n    if (dict.tableObject(tableId).dataPrCompany())\r\n    {\r\n        //Append the default Fields\r\n        fieldArr =  fieldArr + ':' + 'DATAAREAID';\r\n    }\r\n\r\n    if (dict.tableObject(tableId).dataPerPartition())\r\n    {\r\n        fieldArr =  fieldArr + ':' + 'PARTITION';\r\n    }\r\n\r\n    return fieldArr;\r\n}\r\n\r\n\r\n\r\n\r\n// get enum values to container\r\nstatic void Enum2container(Args _args)\r\n{\r\n   \r\n    int         i = 0;\r\n    DictEnum    dimCode;\r\n    container   ret;\r\n    ;\r\n\r\n    dimCode = new DictEnum(enumnum(SysDimension));\r\n    while(i < dimCode.values())\r\n    {\r\n        ret += dimCode.index2Name(i);\r\n        i++;\r\n    }\r\n    info(strfmt(\"%1\",con2Str(ret)));\r\n}\r\n\r\npublic static boolean checkDateIsInPeriod(TransDate _transDate,\r\n                                            PeriodCode  _periodCode = PeriodCode::Regular)\r\n{\r\n    return BudgetTransactionManager::validateTransactionDate(_transDate);\r\n}\r\n\r\n\r\n// New method for returning ledgerperiod last date\r\nstatic transDate findLastOpenPeriod(transdate _ledgerTransDate)\r\n{\r\n    FiscalCalendarRecId     fiscalCalendarRecId;\r\n\r\n    fiscalCalendarRecId = Ledger::fiscalCalendar(CompanyInfo::find().RecId);\r\n    return FiscalCalendars::findLastDayofPeriod( fiscalCalendarRecId, _ledgerTransDate);\r\n}\r\n\r\n// New method for returning first open ledgerperiod first date\r\nstatic transDate findFirstOpenPeriod(transdate _ledgerTransDate)\r\n{\r\n    FiscalCalendarRecId     fiscalCalendarRecId;\r\n\r\n    fiscalCalendarRecId = Ledger::fiscalCalendar(CompanyInfo::find().RecId);\r\n    return FiscalCalendars::findFirstDayofPeriod( fiscalCalendarRecId, _ledgerTransDate);\r\n\r\n}\r\n\r\n\r\n//Calculate Hash for the string.\r\npublic static str CalculateHash(str tb)\r\n{\r\n\r\n    str s;\r\n    ClrObject obj;\r\n    ClrObject md5;\r\n    System.Text.StringBuilder sBuilder;\r\n    ClrObject clrStr;\r\n    ClrObject clrStrObject;\r\n    System.Exception clrException;\r\n    System.Array resultByteArray;\r\n    int i;\r\n    int arrayLength ;\r\n    InteropPermission perm;\r\n\r\n    perm = new InteropPermission(InteropKind::ClrInterop);\r\n    perm.assert();\r\n    try\r\n    {\r\n        obj = System.Text.Encoding::get_ASCII().GetBytes(tb);\r\n        md5 = System.Security.Cryptography.MD5::Create();\r\n        resultByteArray = md5.ComputeHash(obj);\r\n        //BP deviation documented\r\n        sBuilder = new System.Text.StringBuilder();\r\n        arrayLength = resultByteArray.get_Length() ;\r\n        // Loop through each byte of the hashed data\r\n        // and format each one as a hexadecimal string.\r\n        for (i = 0; i <arrayLength; i++)\r\n        {\r\n            clrStrObject = resultByteArray.GetValue(i);\r\n            clrStr = clrStrObject.ToString('x2');\r\n            sBuilder.Append(clrStr);\r\n        }\r\n\r\n        // Return the hexadecimal string.\r\n        s = sBuilder.ToString();\r\n    }\r\n    catch (Exception::CLRError)\r\n    {\r\n        //BP deviation documented\r\n        clrException = CLRInterop::getLastException();\r\n        s = clrException.get_Message();\r\n        error(s);\r\n        throw error(\"@SYS106158\");\r\n    }\r\n\r\n    CodeAccessPermission::revertAssert();\r\n    return s;\r\n\r\n}\r\n\r\n\r\n//Transforms xml to another format of xml using xslt.\r\npublic static str transform(str aifXml, str xsltResourceName)\r\n{\r\n    #define.XsltArgumentList(\"System.Xml.Xsl.XsltArgumentList\")\r\n    #AOT\r\n\r\n    ResourceNode resourceNode;\r\n    TreeNode resourcesNode;\r\n    container data;\r\n    str xsltString;\r\n    str doXml;\r\n\r\n    System.Xml.Xsl.XslCompiledTransform transform;\r\n    System.Text.StringBuilder           stringBuilder;\r\n    System.IO.StringWriter              stringWriter;\r\n    System.IO.StringReader              stringReader;\r\n    System.Xml.XmlTextReader            xmlTextReader;\r\n    System.IO.StringReader              stringReaderForXslt;\r\n    System.Xml.XmlTextReader            xmlTextReaderForXslt;\r\n    System.Xml.Xsl.XsltArgumentList     xsltArguments;\r\n    System.IDisposable                  disposableObj;\r\n\r\n    ;\r\n    // Get the top Resource node in the AOT\r\n    resourcesNode = infolog.findNode(#ResourcesPath);\r\n\r\n    if (resourcesNode)\r\n    {\r\n        // Get the XML string holding the data from the resource item\r\n        resourceNode = resourcesNode.AOTfindChild(xsltResourceName);\r\n        if (resourceNode)\r\n        {\r\n            resourceNode.AOTload();\r\n            data = SysResource::getResourceNodeData(resourceNode);\r\n            xsltString = conpeek(data, 1);\r\n\r\n        }\r\n    }\r\n    try\r\n    {\r\n        //Local XSLT\r\n        transform = new System.Xml.Xsl.XslCompiledTransform();\r\n        stringReaderForXslt = new System.IO.StringReader(xsltString);\r\n        xmlTextReaderForXslt = new System.Xml.XmlTextReader(stringReaderForXslt);\r\n        transform.Load(xmlTextReaderForXslt);\r\n\r\n        //Transform the input AIF XML\r\n        stringReader = new System.IO.StringReader(aifXml);\r\n        xmlTextReader = new System.Xml.XmlTextReader(stringReader);\r\n        stringBuilder = new System.Text.StringBuilder();\r\n        stringWriter = new System.IO.StringWriter(stringBuilder);\r\n\r\n        xsltArguments = ClrInterop::Null(#XsltArgumentList);\r\n\r\n        transform.Transform(xmlTextReader, xsltArguments, stringWriter);\r\n\r\n        doXml = stringBuilder.ToString();\r\n    }\r\n    catch (Exception::CLRError)\r\n    {\r\n        throw Global::error(ClrInterop::getLastException().toString());\r\n    }\r\n\r\n    if (!ClrInterop::isNull(xmlTextReaderForXslt))\r\n    {\r\n        disposableObj = xmlTextReaderForXslt;\r\n        disposableObj.Dispose();\r\n    }\r\n\r\n    if (!ClrInterop::isNull(stringReaderForXslt))\r\n    {\r\n        disposableObj = stringReaderForXslt;\r\n        disposableObj.Dispose();\r\n    }\r\n\r\n    if (!ClrInterop::isNull(xmlTextReader))\r\n    {\r\n        disposableObj = xmlTextReader;\r\n        disposableObj.Dispose();\r\n    }\r\n\r\n    if (!ClrInterop::isNull(stringReader))\r\n    {\r\n        disposableObj = stringReader;\r\n        disposableObj.Dispose();\r\n    }\r\n\r\n    if (!ClrInterop::isNull(stringWriter))\r\n    {\r\n        disposableObj = stringWriter;\r\n        disposableObj.Dispose();\r\n    }\r\n\r\n    return doXml;\r\n}\r\n\r\n\r\n\r\n\r\n//Converts from string to Time.\r\nstatic int str2Time(str 8 _timeStr)\r\n{\r\n    int     time;\r\n    ;\r\n\r\n    time += str2int(substr(_timeStr,0,2)) * 3600;\r\n    time += str2int(substr(_timeStr,4,2)) * 60;\r\n    time += str2int(substr(_timeStr,7,2));\r\n\r\n    return time;\r\n}\r\n\r\n//This function is used to get xml string from xml file.\r\nstatic public str getXMLstringFromFile(str _filepath)\r\n{\r\n    str xmlstring='';\r\n    XmlDocument document=new XmlDocument();\r\n    document.load(_filepath);\r\n    xmlstring=document.innerXml();\r\n    return xmlstring;\r\n}\r\n\r\n// this function is used to convert string to array.\r\npublic static Array str2array(str _inputString, str _delimiter = '\",\"')\r\n{\r\n    List            list        = AmcBankFunctions::strSplit(_inputString, _delimiter);\r\n    ListEnumerator  enumerator  = list.getEnumerator();\r\n\r\n    Array           a           = new Array(Types::String);\r\n    int             i           = 1;\r\n    str             tmpString;\r\n    ;\r\n\r\n    if (strLen(_inputString) == 0 || strScan(_inputString, _delimiter, 1, strLen(_inputString)) == 0)\r\n        return a; // this is not a XTL record\r\n    enumerator.reset();\r\n    while (enumerator.moveNext())\r\n    {\r\n        tmpString = enumerator.current();\r\n\r\n        // Removes first substring's preceding \" and last substring's succeeding \"\r\n        if (strLen(tmpString) > 0)\r\n        {\r\n            if (i == 1 && tmpString)\r\n                tmpString = subStr(tmpString, 2, strLen(tmpString));\r\n            if (i == list.elements())\r\n                tmpString = subStr(tmpString, 1, strLen(tmpString)-1);\r\n        }\r\n\r\n        a.value(i, tmpString);\r\n        i++;\r\n    }\r\n\r\n    return a;\r\n}\r\n\r\n\r\n/// <summary>\r\n///     Prefixes a string with a parameter provided character\r\n/// </summary>\r\n/// <param name=\"inputString\">\r\n///     The integer that is to be converted into a string\r\n/// </param>\r\n/// <param name=\"outputStringLength\">\r\n///     The length of the final string being returned\r\n/// </param>\r\n/// <param name=\"prefixWithChar\">\r\n///     The character which to prefix the output string with\r\n/// </param>\r\n/// <returns>\r\n///     The converted integer as a string with the parameter provided length (possible prefixed with provided\r\n\r\nchar)\r\n/// </returns>\r\npublic static str prefixString(str inputString, int outputStringLength, str 1 prefixWithChar)\r\n{\r\n    str outputString = inputString;\r\n\r\n    if (prefixWithChar == '')\r\n        return outputString;\r\n\r\n    while (strLen(outputString) < outputStringLength)\r\n    {\r\n        outputString = prefixWithChar + outputString;\r\n    }\r\n\r\n    return outputString;\r\n}\r\n\r\n\r\n// to test that we have access right for the the file or folder.\r\npublic static client IO_Status writeFileAndClose(Filename filename)\r\n{\r\n    TextIo textIo;\r\n    ;\r\n\r\n    new FileIOPermission(filename,'rw').assert();\r\n\r\n    textIo = new TextIo(filename,'w');\r\n\r\n    if (textIo!=null)\r\n        textIo.write('This is a test file for checking the access rights');\r\n\r\n    CodeAccessPermission::revertAssert();\r\n\r\n    if (textIo!=null)\r\n        return textIo.status();\r\n\r\n    return IO_Status::WriteError;\r\n}\r\n\r\n\r\n// send email using smtp\r\n//Please change the parameters accordingly for your client\r\npublic static boolean emailSmtpSend(str         _receiver,\r\n                                    str         _subject,\r\n                                    str         _body,\r\n                                    Filename    _attachment = '')\r\n{\r\n    AmcBankParameters                       amcBankParameters;\r\n\r\n    System.Net.Mail.Attachment              attachment;\r\n    System.Net.Mail.AttachmentCollection    attachmentCollection;\r\n    System.Net.Mail.MailAddress             mailFrom;\r\n    System.Net.Mail.MailAddress             mailTo;\r\n    System.Net.Mail.MailMessage             mailMessage;\r\n    System.Net.Mail.SmtpClient              smtpClient;\r\n    ;\r\n\r\n    if (!_receiver)\r\n        return checkFailed(\"@ABA32081\");\r\n\r\n    amcBankParameters = AmcBankParameters::find();\r\n\r\n    try\r\n    {\r\n        mailFrom    = new System.Net.Mail.MailAddress(amcBankParameters.SmtpSenderAddress);\r\n        mailTo      = new System.Net.Mail.MailAddress(_receiver);\r\n        mailMessage = new System.Net.Mail.MailMessage(mailFrom, mailTo);\r\n        mailmessage.set_Subject(_subject);\r\n        mailmessage.set_Body(_body);\r\n\r\n        // Adding attachment\r\n        if (_attachment)\r\n        {\r\n            attachment = new System.Net.Mail.Attachment(_attachment);\r\n            attachmentCollection = mailMessage.get_Attachments();\r\n            attachmentCollection.Add(attachment);\r\n        }\r\n\r\n        smtpClient = new System.Net.Mail.SmtpClient(amcBankParameters.SmtpServerName,\r\n\r\namcBankParameters.SmtpPortNumber);\r\n        smtpClient.Send(mailmessage);\r\n\r\n        info(strFmt(\"@SYS80635\", _receiver));\r\n\r\n        attachmentCollection.Dispose(); // Releases attachement resources (files)\r\n\r\n    }\r\n    catch (Exception::CLRError)\r\n    {\r\n        // If a CLR exception occurs it is important that the exceptions is shown (which it is not per default)\r\n        error(CLRInterop::getLastException());\r\n        attachmentCollection.Dispose(); // Releases attachement resources (files)\r\n\r\n        return checkFailed(strFmt(\"@ABA32082\",  _receiver));\r\n    }\r\n    catch\r\n    {\r\n        attachmentCollection.Dispose(); // Releases attachement resources (files)\r\n\r\n        return checkFailed(strFmt(\"@ABA32082\",  _receiver));\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n\r\n// archive the files.\r\npublic static void fileArchive(Filename _file, FilePath _archivePath)\r\n{\r\n    Filename            filenameArchive;\r\n\r\n    InteropPermission   interopPermission = new InteropPermission(InteropKind::ClrInterop);\r\n    Set                 interopPermissionSet = new Set(Types::Class);\r\n    ;\r\n    if (!_archivePath)\r\n        return;\r\n\r\n    // Granting file permission rights\r\n    interopPermissionSet.add(interopPermission);\r\n    CodeAccessPermission::assertMultiple(interopPermissionSet);\r\n\r\n    filenameArchive = _archivePath + AmcBankFile::getFileNameAndExtension(_file);\r\n\r\n    System.IO.File::Delete(filenameArchive);\r\n    System.IO.File::Move(_file, filenameArchive);\r\n\r\n    // Reverting file permission rights\r\n    CodeAccessPermission::revertAssert();\r\n}\r\n\r\n// getting the filename and extesion in container.\r\npublic static Filename getFileNameAndExtension(Filename _filename)\r\n{\r\n    ;\r\n    if (!_filename)\r\n        return '';\r\n\r\n    return strFmt('%1%2', conPeek(Global::fileNameSplit(_filename), 2),     // Filename\r\n                          conPeek(Global::fileNameSplit(_filename), 3));    // File extension (including\r\n\r\nprefixed dot (.))\r\n}\r\n\r\n//FolderExists\r\npublic static boolean folderExists(FilePath _directory)\r\n{\r\n    boolean             dirExists;\r\n\r\n    InteropPermission   interopPermission = new InteropPermission(InteropKind::ClrInterop);\r\n    Set                 interopPermissionSet = new Set(Types::Class);\r\n    ;\r\n\r\n    // Granting file permission rights\r\n    interopPermissionSet.add(interopPermission);\r\n    CodeAccessPermission::assertMultiple(interopPermissionSet);\r\n\r\n    dirExists = System.IO.Directory::Exists(_directory);\r\n\r\n    // Reverting file permission rights\r\n    CodeAccessPermission::revertAssert();\r\n\r\n    return dirExists;\r\n}\r\n\r\n\r\n/// <summary>\r\n///  internal use only.\r\n/// </summary>\r\n/// <param name=\"text\">\r\n/// A String value.\r\n/// </param>\r\n/// <returns>\r\n/// A String value.\r\n/// </returns>\r\nprivate str trimLeadingTabs(str text)\r\n{\r\n    int len = strlen(text);\r\n    int start = 1;\r\n\r\n    while ((start <= len) && (substr(text, start, 1) == '\\t'))\r\n        start++;\r\n\r\n    text = substr(text, start, len - start + 1);\r\n\r\n    return text;\r\n}\r\n\r\n\r\n/// <summary>\r\n///  internal use only.\r\n/// </summary>\r\n/// <returns>\r\n/// A String value.\r\n/// </returns>\r\npublic static str getClrErrorMessage()\r\n{\r\n    #File\r\n    str exceptionMessage;\r\n    System.Exception exObject, innerException;\r\n    ;\r\n\r\n    new InteropPermission(InteropKind::ClrInterop).assert();\r\n\r\n    // BP deviation documented\r\n    exObject = CLRInterop::getLastException();\r\n    if(exObject)\r\n    {\r\n        // We will ignore the first message since it is always a fixed message of\r\n        // \"Exception has been thrown from target of invocation\", this is from the reflection API being used\r\n        // \"ClrObject could not be created.\" - This is also of no use in most cases\r\n        innerException = exObject.get_InnerException();\r\n        while(innerException)\r\n        {\r\n            // BP deviation documented\r\n            exceptionMessage = exceptionMessage + #delimiterSpace + CLRInterop::getAnyTypeForObject\r\n\r\n(innerException.get_Message());\r\n            innerException = innerException.get_InnerException();\r\n        }\r\n    }\r\n\r\n    CodeAccessPermission::revertAssert();\r\n\r\n    return exceptionMessage;\r\n\r\n}\r\n\r\n//Parse date from string\r\npublic static date parseDate(str dateText)\r\n{\r\n    str dateTimeText;\r\n    ClrObject dateTimeObject;\r\n    utcdatetime dateTimeValue;\r\n    date dateValue;\r\n\r\n\r\n    dateTimeText = strFmt('%1T00:00:00Z', dateText);\r\n\r\n    // BP Deviation Documented\r\n    dateTimeObject = Microsoft.Dynamics.IntegrationFramework.Util::ParseXmlDateTime(dateTimeText, false);\r\n\r\n    // If the returned object is null, then deserialization failed\r\n    if (CLRInterop::isNull(dateTimeObject))\r\n    {\r\n        throw error(strfmt(\"@SYS112380\", dateText, enum2str(Types::Date)));\r\n    }\r\n\r\n    dateTimeValue = CLRInterop::getAnyTypeForObject(dateTimeObject);\r\n\r\n    // If the utcdatetime value is null, then the value is outside the valid range\r\n    // unless the input was a null datetime\r\n    if (dateTimeValue == utcDateTimeNull() && !AifUtil::isNullDateTime(dateTimeObject))\r\n    {\r\n        throw error(strfmt(\"@SYS112380\", dateText, enum2str(Types::Date)));\r\n    }\r\n\r\n    dateValue = DateTimeUtil::date(dateTimeValue);\r\n\r\n    return dateValue;\r\n}\r\n\r\n//Parse DateTime from string\r\npublic static utcdatetime parseDateTime(str dateTimeText, System.DateTimeKind expectedDateTimeKind)\r\n{\r\n    ClrObject dateTimeObject;\r\n    utcdatetime dateTimeValue;\r\n    System.DateTime systemDateTimeValue;\r\n\r\n    // BP Deviation Documented\r\n    dateTimeObject = Microsoft.Dynamics.IntegrationFramework.Util::ParseXmlDateTime(dateTimeText, false);\r\n\r\n    // If the returned object is null, then deserialization failed\r\n    if (CLRInterop::isNull(dateTimeObject))\r\n    {\r\n        throw error(strfmt(\"@SYS112380\", dateTimeText, enum2str(Types::UtcDateTime)));\r\n    }\r\n\r\n    dateTimeValue = CLRInterop::getAnyTypeForObject(dateTimeObject);\r\n\r\n    // If the utcdatetime value is null, then the value is outside the valid range\r\n    // unless the input was a null datetime\r\n    if (dateTimeValue == utcDateTimeNull() && !AifUtil::isNullDateTime(dateTimeObject))\r\n    {\r\n        throw error(strfmt(\"@SYS112380\", dateTimeText, enum2str(Types::UtcDateTime)));\r\n    }\r\n\r\n    // If the value is of unexpected kind, throw an error.\r\n    systemDateTimeValue = dateTimeObject;\r\n    if (systemDateTimeValue.get_Kind() != expectedDateTimeKind)\r\n    {\r\n        throw error(strfmt(\"@SYS112380\", dateTimeText, enum2str(Types::UtcDateTime)));\r\n    }\r\n\r\n    return dateTimeValue;\r\n}\r\n\r\n// get the sequence number for the dateformat.\r\npublic static int getSequenceForDateFormat( DateFormat _dateFormat)\r\n{\r\n    ;\r\n\r\n    switch (_dateFormat)\r\n    {\r\n        case DateFormat::YMD:\r\n            return 321;\r\n        case DateFormat::DMY:\r\n            return 123;\r\n        case DateFormat::DYM:\r\n            return 132;\r\n        case DateFormat::MDY:\r\n            return 213;\r\n        case DateFormat::MYD:\r\n            return 231;\r\n        case DateFormat::YDM:\r\n            return 312;\r\n        default:\r\n            return 123;\r\n    }\r\n}\r\n\r\n// returns time from str.\r\nstatic int str2Time(str 8 _timeStr)\r\n{\r\n    int     time;\r\n    ;\r\n\r\n    time += str2int(substr(_timeStr,0,2)) * 3600;\r\n    time += str2int(substr(_timeStr,4,2)) * 60;\r\n    time += str2int(substr(_timeStr,7,2));\r\n\r\n    return time;\r\n}\r\n\r\n// <CostCenter:Department> _dimaatributesString,\r\n// <1010:MBS> dimValueString\r\npublic static RecId generateDefaultDimension(Str                        _dimValueString,\r\n                                             str                        _dimaatributesString,\r\n                                             str                        _delimeter)\r\n{\r\n    container                           dimAttributeList,\r\n                                        dimValueList;\r\n    int                                 j;\r\n\r\n    RecId                               defDimRecId;\r\n    DimensionAttributeValueSetStorage   storage;\r\n\r\n    if (_dimaatributesString && _dimValueString)\r\n    {\r\n        dimAttributeList = str2con(_sourceProperties, _delimeter,false);\r\n        dimValueList     = str2con(_dimValueString, _delimeter,false);\r\n\r\n        if(!dimValueList)\r\n        {\r\n            throw error(strFmt(\"This dimvalue string was not available\"));\r\n        }\r\n\r\n        storage = new DimensionAttributeValueSetStorage();\r\n\r\n        for (j=1;j<=conLen(dimValueList);j++)\r\n        {\r\n            if(conPeek(dimValueList,j))\r\n            {\r\n                DMFDimensionHelper::dynamicDimensionCreation(dimAttributeList, dimValueList, j);\r\n\r\n                storage.addItem(DimensionAttributeValue::findByDimensionAttributeAndValue(DimensionAttribute::findByName(conPeek(dimAttributeList,j)), conPeek(dimValueList,j), false, true));\r\n            }\r\n        }\r\n\r\n        defDimRecId = storage.save();\r\n    }\r\n    return defDimRecId;\r\n\r\n}\r\n\r\n\r\n//Generate the Dimension String from default dimension\r\n// <CostCenter:Department> dimAttributeString\r\n// <1010:MBS> dimValueString\r\npublic static str generateDefaultDimensionStr(RefRecId  _defaultDimension,str _dimattrString,\r\n                                                  str _delimeter)\r\n{\r\n    DMFDefaultDimensionStr              defaultDimensionStr;\r\n    DimensionAttributeValueSetItem      setItem;\r\n    DimensionAttributeValue             dimAttrValue;\r\n    DimensionAttribute                  dimAttr;\r\n    container                           con;\r\n    Int                                 i;\r\n    DimensionValue                      displayValue;\r\n\r\n    con = str2con(_dimattrString,_delimeter,false);\r\n\r\n    if (_dimattrString && _defaultDimension)\r\n    {\r\n        for( i = 1; i <= conLen(con); i ++)\r\n        {\r\n            displayValue = conPeek(con,i);\r\n\r\n            select RecId, DisplayValue from setItem where setItem.DimensionAttributeValueSet == _defaultDimension\r\n                join RecId from dimAttrValue where\r\n                     dimAttrValue.RecId == setItem.DimensionAttributeValue &&\r\n                     dimAttrValue.IsDeleted == false\r\n                 join RecId from dimAttr\r\n                    where  dimAttr.RecId == dimAttrValue.DimensionAttribute\r\n                       &&  dimAttr.Name  == displayValue;\r\n\r\n                if (defaultDimensionStr)\r\n                {\r\n                    defaultDimensionStr += _delimeter;\r\n                }\r\n\r\n                defaultDimensionStr += setItem.DisplayValue;\r\n        }\r\n    }\r\n\r\n    return defaultDimensionStr;\r\n}\r\n\r\n\r\nstatic int strLineCount(str freeTxt)\r\n{\r\n    int  start  = 1;\r\n    int  end;\r\n    int  length;\r\n    int  lines  = 0;\r\n\r\n    length=strLen(freeTxt);\r\n\r\n    end = strScan(freeTxt, '\\n', start, length);\r\n\r\n    while (start)\r\n    {\r\n        lines+=1;\r\n        if (end)\r\n        {\r\n            start=end+1;\r\n            end = strScan(freeTxt, '\\n', start, length);\r\n        }\r\n        else\r\n            start=0;\r\n    }\r\n\r\n    if (!lines)\r\n        lines=1;\r\n\r\n    return lines;\r\n}\r\n\r\n\r\n/// <summary>\r\n/// Determines whether the specified string is a date time string.\r\n/// </summary>\r\n/// <param name=\"_value\">\r\n/// The string to check.\r\n/// </param>\r\n/// <returns>\r\n/// true if it is date time; otherwise, false.\r\n/// </returns>\r\n/// <remarks>\r\n/// Input can have a format like \"5/7/2010 12:00:00 AM\" or \"2010-05-07T00:00:00\u201d. Both cases will be\r\n/// handled.\r\n/// </remarks>\r\npublic static boolean isDateTimeStr(str _value)\r\n{\r\n    boolean isDateTime;\r\n    System.Text.RegularExpressions.Regex regex;\r\n    System.Text.RegularExpressions.Match regexMatch;\r\n    #define.MatchTimeRegex(@\"[\\sT]\\d{1,2}:\\d{1,2}:\\d{1,2}\")\r\n    #define.ISODateTimeIdentifier(\"T\")\r\n    #define.ZeroTime(\"00:00:00\")\r\n    #define.DefaultLCID(1033)\r\n\r\n    // check if in ISO format.\r\n    isDateTime = strFind(_value, #ISODateTimeIdentifier, 0, strLen(_value)) > 0;\r\n    if(!isDateTime)\r\n    {\r\n\r\n        // search for a time on the value\r\n        // BP deviation documented\r\n        regex = new System.Text.RegularExpressions.Regex(#MatchTimeRegex);\r\n\r\n        // BP deviation documented\r\n        regexMatch = regex.Match(_value);\r\n        isDateTime = regexMatch.get_Success();\r\n    }\r\n\r\n    return isDateTime;\r\n}\r\n\r\n\r\n//Swapping the key value from map\r\n/// <summary>\r\n/// Creates a <c>Map</c> class with the value and key swapped.\r\n/// </summary>\r\n/// <param name=\"_key2ValueMap\">\r\n/// Map that has the keys and values swapped.\r\n/// </param>\r\n/// <returns>\r\n/// A map that has the value switched with the keys.\r\n/// </returns>\r\npublic static Map getValue2KeyMap(Map _key2ValueMap)\r\n{\r\n    // reverses the valid values map. The original map contains <key, label>, we will create a <label, key>\r\n    Map value2KeyMap;\r\n    MapEnumerator mapEnum;\r\n\r\n    if(_key2ValueMap)\r\n    {\r\n        value2KeyMap = new Map(_key2ValueMap.valueType(), _key2ValueMap.keyType());\r\n        mapEnum = _key2ValueMap.getEnumerator();\r\n        while(mapEnum.moveNext())\r\n        {\r\n            value2KeyMap.insert(mapEnum.currentValue(), mapEnum.currentKey());\r\n        }\r\n    }\r\n\r\n    return value2KeyMap;\r\n}\n"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-c#",children:'//Show viewhistory on form datasources if you have ValidaTimeState Enabled DateTime enabled on the tables of that form. \r\n//create this method in Global class so you can call whereever you want in form button click as below.\r\n\r\nvoid clicked()\r\n\r\n{\r\n    buttonHistoryClick(element, this);\r\n    Super();\r\n}\r\n\r\nstatic public void buttonHistoryClick(FormRun _formRun, FormButtonControl _fbc)\r\n{\r\n    void changeDataSources(ValidTimeStateAutoQuery _from, ValidTimeStateAutoQuery _to, boolean _allowDelete)\r\n    {\r\n        Counter         dataSourceNo;\r\n        FormDataSource  formDataSource;\r\n\r\n        for (dataSourceNo=1;_formRun.dataSourceCount()>=dataSourceNo;dataSourceNo++)\r\n        {\r\n            formDataSource = _formRun.dataSource(dataSourceNo) as FormDataSource;\r\n            if (formDataSource.validTimeStateAutoQuery() == _from && new DictTable(formDataSource.table()).isValidTimeStateTable())\r\n            {\r\n                formDataSource.validTimeStateAutoQuery(_to);\r\n                switch (_to)\r\n                {\r\n                    case ValidTimeStateAutoQuery::AsOfDate:\r\n                        formDataSource.validTimeStateAutoQuery(ValidTimeStateAutoQuery::AsOfDate);\r\n                        formDataSource.query().resetValidTimeStateQueryType();\r\n                        formDataSource.allowDelete(_allowDelete);\r\n                        break;\r\n                    case ValidTimeStateAutoQuery::DateRange:\r\n                        formDataSource.validTimeStateAutoQuery(ValidTimeStateAutoQuery::DateRange);\r\n                        formDataSource.query().validTimeStateDateTimeRange(DateTimeUtil::minValue(), DateTimeUtil::maxValue());\r\n                        formDataSource.allowDelete(_allowDelete);\r\n                        break;\r\n                }\r\n                formDataSource.executeQuery();\r\n            }\r\n        }\r\n    }\r\n\r\n    if (_fbc.labelText() == "@SYS110266")\r\n    {\r\n        changeDataSources(ValidTimeStateAutoQuery::AsOfDate, ValidTimeStateAutoQuery::DateRange, false);\r\n        _fbc.text("Stoping History");\r\n        _fbc.normalImage("10006");\r\n    }\r\n    else\r\n    {\r\n        changeDataSources(ValidTimeStateAutoQuery::DateRange, ValidTimeStateAutoQuery::AsOfDate, true);\r\n        _fbc.Text("@SYS110266\r\n        _fbc.normalImage("10007");\r\n    }\r\n\r\n}\r\n// this method is used to create filenameTimeStamp.\r\n\r\nstatic FileName createFilenameTimeStamp()\r\n{\r\n    FileName    ret;\r\n    Microsoft.Dynamics.IntegrationFramework.Adapter.FileSystem       fileSystem;\r\n    #Aif\r\n\r\n    fileSystem      = AifUtil::getClrObject(#FileSystemProgId);\r\n\r\n    ret = fileSystem.GetCurrentTimestamp();\r\n\r\n    return ret;\r\n}\r\n\r\n\r\n// This method is used to split the string, and returns the conatiner with the position defined in the parameter\r\npublic static str rsaStrSplit(str _splitString,str _splitchar,int _pos)\r\n{\r\n    List strlist=new List(Types::String);\r\n    ListIterator    iterator;\r\n    container       packedList;\r\n    ;\r\n    strlist=strSplit(_splitString,_splitchar);\r\n    iterator = new ListIterator(strlist);\r\n    while(iterator.more())\r\n    {\r\n        packedList += iterator.value();\r\n        iterator.next();\r\n    }\r\n    return conPeek(packedList,_pos);\r\n\r\n}\r\n\r\npublic static str encrypt(str _input, str _salt = \'\')\r\n{\r\n    System.Security.Cryptography.SHA512Managed  sha512managed = new System.Security.Cryptography.SHA512Managed();\r\n    System.Text.Encoding                        encoding = System.Text.Encoding::get_UTF8();\r\n\r\n    System.Byte[]                               inputBytes;\r\n    System.Byte[]                               resultBytes;\r\n\r\n    int                                         i;\r\n    str                                         returnString;\r\n    ;\r\n\r\n    new InteropPermission(InteropKind::ClrInterop).assert();\r\n\r\n    inputBytes = encoding.GetBytes(strLwr(_salt) + _input); // Convert lower case salt + input into byte array\r\n\r\n    // The input is hashed 1024 times for attack resiliency\r\n    for (i = 0; i < 1024; i++)\r\n    {\r\n        resultBytes = resultBytes ? resultBytes : inputBytes; // First loop uses input for hashing\r\n        resultBytes = sha512managed.ComputeHash(resultBytes);\r\n    }\r\n\r\n    returnString = System.Convert::ToBase64String(resultBytes);\r\n\r\n    CodeAccessPermission::revertAssert();\r\n\r\n    return returnString;\r\n}\r\n\r\nprivate static Map fileGetList(FilePath            _filePathArchive)\r\n\r\n{\r\n  \r\n    Map                 mapFiles;\r\n\r\n    InteropPermission   interopPermission = new InteropPermission(InteropKind::ClrInterop);\r\n    Set                 interopPermissionSet = new Set(Types::Class);\r\n    System.Array        arrayFiles;\r\n\r\n    int                 i;\r\n    ;\r\n\r\n    // Granting file permission rights\r\n    interopPermissionSet.add(interopPermission);\r\n    CodeAccessPermission::assertMultiple(interopPermissionSet);\r\n\r\n    mapFiles = new Map(Types::String, Types::String); // Key = return file | Value = archive path\r\n\r\n        if (!System.IO.Directory::Exists(_filePathArchive))\r\n        {\r\n             throw  error("Path doesnt exist");\r\n        }\r\n\r\n        arrayFiles = System.IO.Directory::GetFiles(_filePathArchive);\r\n\r\n        // CLRInterop::getAnyTypeForObject method is used to handle difference in AX and System types (e.g. System.Int32 != int)\r\n\r\n        for (i = 0; i < CLRInterop::getAnyTypeForObject(arrayFiles.get_Length()); i++)\r\n        {\r\n       mapFiles.insert(CLRInterop::getAnyTypeForObject(arrayFiles.GetValue(i)), _filePathArchive);\r\n        }\r\n    }\r\n\r\n    // Reverting file permission rights\r\n    CodeAccessPermission::revertAssert();\r\n\r\n    return mapFiles;\r\n}\r\n\r\n\r\n/// <summary>\r\n///  Gets the SenderID from AIF xml .\r\n/// </summary>\r\n/// <param name="messagePartsXml">\r\n/// An <c>AifXml</c> value.\r\n/// </param>\r\n/// <returns>\r\n/// An instance of the <c>str document Namespace</c> class.\r\n/// </returns>\r\npublic static str getSenderIDValue(AifXml messagePartsXml)\r\n{\r\n     XmlTextReader               xmlReader;\r\n    str value,currentElement,pureElement;\r\n\r\n;\r\n#Aif\r\n    xmlReader = XmlTextReader::newXml(messagePartsXml);\r\n    while (xmlReader.Read())\r\n    {\r\n        switch (xmlReader.nodeType())\r\n        {\r\n             case XmlNodeType::Element:\r\n                  currentElement = xmlReader.name();\r\n                 break;\r\n             case XmlNodeType::Text:\r\n                  pureElement = subStr(currentElement,strFind(currentElement,\':\',1,256)+1,256);\r\n                    switch (pureElement)\r\n                    {\r\n                       case "SenderId":\r\n                        {\r\n                            value=xmlReader.value();\r\n                            return value;\r\n                        }\r\n                        break;\r\n                    }\r\n              break;\r\n        }\r\n    }\r\n\r\n    return value;\r\n}\n'})})]})}function c(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>l});var t=n(96540);const i={},a=t.createContext(i);function s(e){const r=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(a.Provider,{value:r},e.children)}}}]);