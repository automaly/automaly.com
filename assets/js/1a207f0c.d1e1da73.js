"use strict";(self.webpackChunkautomaly_com=self.webpackChunkautomaly_com||[]).push([[1025],{25464:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var r=n(85893),l=n(11151);const a={title:"Create and write to XML file in Dynamics AX",description:"Create and write to XML file in Dynamics AX",date:new Date("2015-02-04T00:00:00.000Z"),categories:["AX2012"],tags:["xpp","xml"]},i=void 0,o={id:"development/xpp-sample/2015-02-04-create-and-write-to-xml-file-in-dynamics-ax/index",title:"Create and write to XML file in Dynamics AX",description:"Create and write to XML file in Dynamics AX",source:"@site/docs/03-development/01-xpp-sample/2015-02-04-create-and-write-to-xml-file-in-dynamics-ax/index.md",sourceDirName:"03-development/01-xpp-sample/2015-02-04-create-and-write-to-xml-file-in-dynamics-ax",slug:"/development/xpp-sample/2015-02-04-create-and-write-to-xml-file-in-dynamics-ax/",permalink:"/docs/development/xpp-sample/2015-02-04-create-and-write-to-xml-file-in-dynamics-ax/",draft:!1,unlisted:!1,tags:[{label:"xpp",permalink:"/docs/tags/xpp"},{label:"xml",permalink:"/docs/tags/xml"}],version:"current",frontMatter:{title:"Create and write to XML file in Dynamics AX",description:"Create and write to XML file in Dynamics AX",date:"2015-02-04T00:00:00.000Z",categories:["AX2012"],tags:["xpp","xml"]},sidebar:"tutorialSidebar",previous:{title:"X++",permalink:"/docs/category/x"},next:{title:"Execute Stored Procedure from X++ code",permalink:"/docs/development/xpp-sample/2015-05-12-execute-stored-procedure-from-x-code/"}},d={},c=[];function s(e){const t={code:"code",img:"img",p:"p",pre:"pre",...(0,l.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"In this post let's explore creating XML using X++ code in Dynamics AX."}),"\n",(0,r.jsxs)(t.p,{children:["The following example shows how to create and write data to an XML file by using the ",(0,r.jsx)(t.code,{children:"XmlDocument"}),", ",(0,r.jsx)(t.code,{children:"XmlElement"}),", and ",(0,r.jsx)(t.code,{children:"XmlWriter"})," classes. It loops through all of the records in the ",(0,r.jsx)(t.code,{children:"CarTable"})," and find all the fields in the table automatically by using the ",(0,r.jsx)(t.code,{children:"DictTable"})," and ",(0,r.jsx)(t.code,{children:"DictField"})," classes."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-C#",children:'static void WriteXml(Args _args)\r\n{\r\n\r\n    XmlDocument xmlDoc;\r\n    XmlElement xmlRoot;\r\n    XmlElement xmlField;\r\n    XmlElement xmlRecord;\r\n    XMLWriter xmlWriter;\r\n\r\n    CarTable carTable;\r\n    DictTable dTable = new DictTable(tablenum(CarTable));\r\n    DictField dField;\r\n    int i, fieldId;\r\n    str value;\r\n    ; \r\n\r\n    #CarsXmlTags \r\n\r\n    // Create a new object of the XmlDocument class\r\n    xmlDoc = XmlDocument::newBlank();\r\n\r\n    // Create the root node\r\n    xmlRoot = xmlDoc.createElement(#CarRootNode);\r\n\r\n    // Loop through all the records in the carTable\r\n    while select carTable\r\n    {\r\n        // Create a XmlElement (record) to hold the\r\n        // contents of the current record.\r\n        xmlRecord = xmlDoc.createElement(#CarRecords);\r\n        // Loop through all the fields in the record\r\n\r\n        for (i=1; i<=dTable.fieldCnt(); i++)\r\n        {\r\n            // Get the fieldId from the field-count\r\n            fieldId = dTable.fieldCnt2Id(i);\r\n            \r\n            // Find the DictField object that matches the fieldId\r\n            dField = dTable.fieldObject(fieldId);\r\n            \r\n            // Skip system fields\r\n            if (dField.isSystem())\r\n            continue;\r\n\r\n            // Create a new XmlElement (field) and\r\n            // have the name equal to the name of the\r\n            // dictField\r\n            xmlField = xmlDoc.createElement(dField.name());\r\n            \r\n            // Convert values to string. I have just added\r\n            // a couple of conversion as an example.\r\n            // Use tableName.(fieldId) instead of fieldname\r\n            // to get the content of the field.\r\n            switch (dField.baseType())\r\n            {\r\n                case Types::Int64 :\r\n                    value = int642str(carTable.(fieldId));\r\n                break;\r\n                case Types::Integer :\r\n                    value = int2str(carTable.(fieldId));\r\n                break;\r\n                default :\r\n                    value = carTable.(fieldId);\r\n                break;\r\n            }\r\n\r\n            // Set the innerText of the XmlElement (field)\r\n            // to the value from the table\r\n            xmlField.innerText(value);\r\n             \r\n            // Append the field as a child node to the record\r\n            xmlRecord.appendChild(xmlField);\r\n        }\r\n         // Add the record as a child node to the root\r\n        xmlRoot.appendChild(xmlRecord);\r\n    }\r\n    // Add the root to the XmlDocument\r\n    xmlDoc.appendChild(xmlRoot);\r\n    // Create a new object of the XmlWriter class\r\n    // in order to be able to write the xml to a file\r\n    xmlWriter = XMLWriter::newFile(@"c:tempcars.xml");\r\n    // Write the content of the XmlDocument to the\r\n    // file as specified by the XmlWriter\r\n    xmlDoc.writeTo(xmlWriter);\r\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:"The file that is created looks like the one in the following screenshot(only first part of the file is shown):"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"&quot;create-and-write-to-xml&quot;",src:n(45632).Z+"",title:"create-and-write-to-xml",width:"352",height:"384"})}),"\n",(0,r.jsx)(t.p,{children:"As you can see, this file is based on a standard XML format with tags and values only. You can, however, use tag attributes as well. To put the values from the table into tag attributes instead of their own tags, simply change the following code snippet in the example above"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-C#",children:"// Set the innerText of the XmlElement (field)\r\n// to the value from the table\r\nxmlField.innerText(value);\r\n\r\n// Append the field as a child node to the record\r\nxmlRecord.appendChild(xmlField);\n"})}),"\n",(0,r.jsx)(t.p,{children:"With these lines:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-C#",children:"// Add the attribute to the record\r\nxmlRecord.setAttribute(dField.name(), value);\n"})}),"\n",(0,r.jsx)(t.p,{children:"The file that is created now looks like the one in the following screenshot:"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"&quot;create-and-write-to-xml&quot;",src:n(74033).Z+"",title:"create-and-write-to-xml",width:"576",height:"179"})})]})}function m(e={}){const{wrapper:t}={...(0,l.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},45632:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/create-and-write-to-xml-file-in-dynamics-ax_1-0c382dd5e1d3c01d7b6622448c667636.png"},74033:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/create-and-write-to-xml-file-in-dynamics-ax_2-a12a252fe36633502110660d8ccdcbfb.png"},11151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>i});var r=n(67294);const l={},a=r.createContext(l);function i(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);