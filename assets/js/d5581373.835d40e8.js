"use strict";(self.webpackChunkautomaly_com=self.webpackChunkautomaly_com||[]).push([[8289],{15831:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=t(85893),n=t(11151);const o={date:"2023-12-25",title:"Create parameters, manipulate query for SSRS type query",categories:["X++","SSRS"],tags:["ssrs"],authors:"max"},s=void 0,i={id:"development/business-docs/ssrs/2023-12-25-Create-parameters,-manipulate-query-for-SSRS-type-query/index",title:"Create parameters, manipulate query for SSRS type query",description:"Normally, we don't do any coding with SSRS query based report. This code below will show you how to create parms and manipulate the query for SSRS query based report.",source:"@site/docs/03-development/02-business-docs/01-ssrs/2023-12-25-Create-parameters,-manipulate-query-for-SSRS-type-query/index.md",sourceDirName:"03-development/02-business-docs/01-ssrs/2023-12-25-Create-parameters,-manipulate-query-for-SSRS-type-query",slug:"/development/business-docs/ssrs/2023-12-25-Create-parameters,-manipulate-query-for-SSRS-type-query/",permalink:"/development/business-docs/ssrs/2023-12-25-Create-parameters,-manipulate-query-for-SSRS-type-query/",draft:!1,unlisted:!1,tags:[{label:"ssrs",permalink:"/tags/ssrs"}],version:"current",frontMatter:{date:"2023-12-25",title:"Create parameters, manipulate query for SSRS type query",categories:["X++","SSRS"],tags:["ssrs"],authors:"max"},sidebar:"tutorialSidebar",previous:{title:"How to remove SSRS reports in FinOps Cloud-Hosted",permalink:"/development/business-docs/ssrs/2022-10-20-how-to-remove-ssrs-reports-in-d365/"},next:{title:"Electronic reporting (ER) overview",permalink:"/development/business-docs/ger/"}},l={},c=[];function p(e){const r={a:"a",code:"code",p:"p",pre:"pre",...(0,n.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(r.p,{children:["Normally, we don't do any coding with ",(0,a.jsx)(r.a,{href:"https://learn.microsoft.com/en-us/dynamicsax-2012/appuser-itpro/how-to-use-a-query-in-a-report",children:"SSRS query based report"}),". This code below will show you how to create parms and manipulate the query for SSRS query based report."]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-csharp",metastring:'showLineNumbers title="DEV_SSRSGlobal_Contract"',children:"[\r\n    DataContract,\r\n    SysOperationGroup('GroupId', \"Group label\", '1'),\r\n    SrsReportName('DEV_Tax1099.Report'),\r\n    SysOperationContractProcessing(classStr(DEV_SSRSGlobal_UIBuilder),\r\n    SysOperationDataContractProcessingMode::CreateUIBuilderForRootContractOnly)\r\n]\r\npublic class DEV_SSRSGlobal_Contract extends SrsReportRdlDataContract implements SysOperationValidatable\r\n{\r\n    ExchangeRateTypeName  exchangeRateTypeName;\r\n    CompanyBankAccount    companyBankAccount;\r\n    NoYesId               useCurrentDate;\r\n    FromDate              fromDate;\r\n    ToDate                toDate;\r\n    \r\n    [\r\n        DataMemberAttribute(identifierStr(ExchangeRateTypeName)),\r\n        SysOperationDisplayOrderAttribute('1')\r\n    ]\r\n    public ExchangeRateTypeName parmExchangeRateTypeName(ExchangeRateTypeName _exchangeRateTypeName = exchangeRateTypeName)\r\n    {\r\n        exchangeRateTypeName = _exchangeRateTypeName;\r\n        return exchangeRateTypeName;\r\n    }\r\n\r\n    [\r\n        DataMemberAttribute(identifierStr(CompanyBankAccount)),\r\n        SysOperationDisplayOrderAttribute('2')\r\n    ]\r\n    public CompanyBankAccount parmBankAccount(CompanyBankAccount _companyBankAccount = companyBankAccount)\r\n    {\r\n        companyBankAccount = _companyBankAccount;\r\n        return companyBankAccount;\r\n    }\r\n\r\n    [\r\n        DataMemberAttribute(identifierStr(UseCurrentDate)),\r\n        SysOperationLabelAttribute(literalstr(\"Use current date\")),\r\n        SysOperationHelpTextAttribute(literalstr(\"Help text\")),\r\n        SysOperationDisplayOrderAttribute('3')\r\n    ]\r\n    public NoYesId parmUseCurrentDate(NoYesId _useCurrentDate = useCurrentDate)\r\n    {\r\n        useCurrentDate = _useCurrentDate;\r\n        return useCurrentDate;\r\n    }\r\n\r\n    [\r\n        DataMemberAttribute(identifierStr(FromDate)),\r\n        SysOperationLabelAttribute(literalstr(\"From date label\")),\r\n        SysOperationHelpTextAttribute(literalstr(\"Help text\")),\r\n        SysOperationGroupMemberAttribute('GroupId'),\r\n        SysOperationDisplayOrderAttribute('1')\r\n    ]\r\n    public FromDate parmFromDate(FromDate _fromDate = fromDate)\r\n    {\r\n        fromDate = _fromDate;\r\n        return fromDate;\r\n    }\r\n\r\n    [\r\n        DataMemberAttribute(identifierStr(ToDate)),\r\n        SysOperationLabelAttribute(literalstr(\"To date label\")),\r\n        SysOperationHelpTextAttribute(literalstr(\"Help text\")),\r\n        SysOperationGroupMemberAttribute('GroupId'),\r\n        SysOperationDisplayOrderAttribute('2')\r\n    ]\r\n    public ToDate parmToDate(ToDate _toDate = toDate)\r\n    {\r\n        toDate = _toDate;\r\n        return toDate;\r\n    }\r\n\r\n    public boolean validate()\r\n    {\r\n        boolean ret = true;\r\n        \r\n        if (!exchangeRateTypeName)\r\n        {\r\n            ret = checkFailed(\"exchangeRateTypeName should be specified\");\r\n        }\r\n        if (!companyBankAccount)\r\n        {\r\n            ret = checkFailed(\"companyBankAccount should be specified\");\r\n        }\r\n        return ret;\r\n    }\r\n\r\n}\n"})}),"\n",(0,a.jsx)(r.p,{children:"Using UIBuilder class, we can control the parm behaviour and set default value."}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-csharp",metastring:'showLineNumbers title="SysOperationAutomaticUIBuilder"',children:'[\r\n    SysOperationContractProcessing(classstr(DEV_SSRSGlobal_Contract),\r\n    SysOperationDataContractProcessingMode::CreateUIBuilderForRootContractOnly)\r\n]\r\ninternal final class DEV_SSRSGlobal_UIBuilder extends SysOperationAutomaticUIBuilder\r\n{\r\n    private DialogField dialogBankID, dialogExrateType, dialogfromdate, dialogtodate;\r\n\r\n    /// <summary>\r\n    ///     Builds the dialog for the <c></c> SSRS report.\r\n    /// </summary>\r\n    protected DialogField addDialogField(IdentifierName _methodName, Object _dataContract = this.dataContractObject())\r\n    {\r\n        DialogField ret;\r\n        DEV_SSRSGlobal_Contract dataContract = this.dataContractObject() as DEV_SSRSGlobal_Contract;\r\n        \r\n        switch (_methodName)\r\n        {\r\n            case methodStr(DEV_SSRSGlobal_Contract, parmExchangeRateTypeName):\r\n                dialogExrateType = this.dialog().addFieldValue(extendedTypeStr(ExchangeRateTypeName), dataContract.parmExchangeRateTypeName(), "Currency Exchange Rate Type");\r\n\t\t\t\t// highlight-next-line\r\n                dialogExrateType.allowEdit(NoYes::No);\r\n                ret = dialogExrateType;\r\n                break;\r\n            case methodStr(DEV_SSRSGlobal_Contract, parmBankAccount):\r\n                dialogBankID = this.dialog().addFieldValue(extendedTypeStr(CompanyBankAccount), dataContract.parmBankAccount(),"Bank Account");\r\n                ret = dialogBankID;\r\n                break;\r\n            case methodStr(DEV_SSRSGlobal_Contract, parmFromDate):\r\n                dialogfromdate = this.dialog().addFieldValue(extendedTypeStr(TransDate), dataContract.parmFromDate(), "From Date");\r\n                ret = dialogfromdate;\r\n                break;\r\n            case methodStr(DEV_SSRSGlobal_Contract, parmToDate):\r\n                dialogtodate = this.dialog().addFieldValue(extendedTypeStr(TransDate), dataContract.parmToDate(),"To Date");\r\n                ret = dialogtodate;\r\n                break;\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /// <summary>\r\n    ///    Transfers data from the dialog into the data contract object.\r\n    /// </summary>\r\n    public void getFromDialog()\r\n    {\r\n        super();\r\n        DEV_SSRSGlobal_Contract contract = this.dataContractObject();\r\n        contract.parmExchangeRateTypeName(dialogExrateType.value());\r\n        contract.parmBankAccount(dialogBankID.value());\r\n        contract.parmFromDate(dialogfromdate.value());\r\n        contract.parmToDate(dialogtodate.value());\r\n    }\r\n\r\n}\n'})}),"\n",(0,a.jsxs)(r.p,{children:["We can manipulate the query using ",(0,a.jsx)(r.code,{children:"preRunModifyContract"})," method in Controller class."]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-csharp",metastring:'showLineNumbers title="DEV_SSRSGlobal_Controller"',children:"internal final class DEV_SSRSGlobal_Controller extends SrsReportRunController\r\n{\r\n    #define.ReportName('DEV_Tax1099.Report')\r\n    #define.parmYear('Year')\r\n    /// <summary>\r\n    ///    Override this method to change the report contract before running the report.\r\n    /// </summary>\r\n\t// highlight-next-line\r\n    protected void preRunModifyContract()\r\n    {\r\n        Query                   query;\r\n        Map                     queryContracts;\r\n        MapEnumerator           mapEnum;\r\n        str                     queryKey;\r\n\r\n        DEV_SSRSGlobal_Contract contract = this.parmReportContract().parmRdlContract() as DEV_SSRSGlobal_Contract;\r\n        //Year year = contract.getValue(#parmYear);\r\n        //date fromDate = mkDate(Tax1099Constants::FirstDay, Tax1099Constants::FirstMonth, year);\r\n        //date toDate = mkDate(Tax1099Constants::LastDay, Tax1099Constants::LastMonth, year);\r\n\r\n        date fromdate = contract.parmFromDate();\r\n        date toDate = contract.parmToDate();\r\n\r\n        queryContracts = this.parmReportContract().parmQueryContracts();\r\n        if(queryContracts)\r\n        {\r\n            mapEnum = queryContracts.getEnumerator();\r\n            while(mapEnum.moveNext())\r\n            {\r\n                queryKey = mapEnum.currentKey();\r\n                query = queryContracts.lookup(queryKey);\r\n                SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(VendSettlementTax1099)), \r\n                    fieldNum(VendSettlementTax1099, TransDate)).value(queryRange(fromDate, toDate));\r\n            }\r\n        }\r\n        super();\r\n    }\r\n\r\n    public static void main(Args _args)\r\n    {\r\n        DEV_SSRSGlobal_Controller controller = new DEV_SSRSGlobal_Controller();\r\n        controller.parmReportName(#ReportName);\r\n        controller.parmArgs(_args);\r\n        controller.startOperation();\r\n    }\r\n\r\n}\n"})})]})}function u(e={}){const{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},11151:(e,r,t)=>{t.d(r,{Z:()=>i,a:()=>s});var a=t(67294);const n={},o=a.createContext(n);function s(e){const r=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),a.createElement(o.Provider,{value:r},e.children)}}}]);