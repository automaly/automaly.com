"use strict";(self.webpackChunknuxulutest=self.webpackChunknuxulutest||[]).push([[8982],{75085:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>u,default:()=>s,frontMatter:()=>c,metadata:()=>a,toc:()=>d});var t=r(74848),i=r(28453);const c={date:new Date("2020-01-25T00:00:00.000Z"),title:"Create Purchase Orders - Confirm - Product receipt - Post using X++ in Dynamics 365 Finance & Operations",tags:["Create Purchase order X++","Coding","integration"],categories:["FinOps","XPP","Integration"],authors:"max"},u=void 0,a={permalink:"/2020/01/25/create-po-confirm-receipt-post",source:"@site/blog/2020-01-25-create-po-confirm-receipt-post/index.md",title:"Create Purchase Orders - Confirm - Product receipt - Post using X++ in Dynamics 365 Finance & Operations",description:"The script will work for Dynamics 365 Finance & Operations version",date:"2020-01-25T00:00:00.000Z",tags:[{inline:!0,label:"Create Purchase order X++",permalink:"/tags/create-purchase-order-x"},{inline:!0,label:"Coding",permalink:"/tags/coding"},{inline:!0,label:"integration",permalink:"/tags/integration"}],readingTime:1.25,hasTruncateMarker:!1,authors:[{name:"Max Nguyen",title:"FinOps Ranger",url:"/about",imageURL:"https://github.com/Dynamics365.png",key:"max",page:null}],frontMatter:{date:"2020-01-25T00:00:00.000Z",title:"Create Purchase Orders - Confirm - Product receipt - Post using X++ in Dynamics 365 Finance & Operations",tags:["Create Purchase order X++","Coding","integration"],categories:["FinOps","XPP","Integration"],authors:"max"},unlisted:!1,lastUpdatedAt:1703128432e3,lastUpdatedBy:"Dynamics365",prevItem:{title:"Set up a VHD for finance and operations apps",permalink:"/2020/04/06/getting-onebox-vhd-dynamics-365-finance-and-operations-virtual-machine"}},o={authorsImageUrls:[void 0]},d=[];function p(e){const n={blockquote:"blockquote",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"The script will work for Dynamics 365 Finance & Operations version"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:'class MaxGeneratePO\n{\n    public static void main(Args _args)\n    {\n        int i = 0; // number of purchase orders\n        NumberSeq numberSeq;\n        PurchTable purchTable;\n        PurchLine purchLine;\n        InventDim inventDim;\n\n        while (i <= 3)\n        {\n            ttsBegin;\n            MaxGeneratePO createPO = new MaxGeneratePO();\n            numberSeq = NumberSeq::newGetNum(PurchParameters::numRefPurchId());\n            numberSeq.used();\n            purchTable.PurchId = numberSeq.num();\n            purchTable.initValue();\n            purchTable.initFromVendTable(VendTable::find(\'US-101\'));\n\n            if (!purchTable.validateWrite())\n            {\n                throw Exception::Error;\n            }\n\n            purchTable.insert();\n            inventDim.clear();\n            purchLine.clear();\n            purchLine.initValue();\n\n            purchLine.PurchId = purchTable.PurchId;\n            purchLine.ItemId = \'D0002\';\n            inventDim.InventSiteId = "1";\n            inventDim.InventLocationId = "11";\n            purchLine.InventDimId=InventDim::findOrCreate(inventDim).inventDimId ;\n            purchLine.createLine(true, true, true, true, true, true);\n\n            purchLine.PurchQty = 5;\n            purchLine.PurchUnit = "ea";\n            purchLine.PurchPrice = createPO.randomAmount(); // get random amount nubmer\n            purchLine.LineAmount = purchLine.calcLineAmount();\n            purchLine.update();\n            \n            //PO confirm\n            PurchFormLetter purchFormLetter;\n            PurchFormLetter purchFormLetterPack;\n            purchFormLetter = PurchFormLetter::construct(DocumentStatus::PurchaseOrder);\n            purchFormLetter.update(purchTable,\n                                strFmt("ConNum_%1", purchTable.PurchId),\n                                systemDateGet(),\n                                PurchUpdate::All,\n                                AccountOrder::None,\n                                NoYes::No,\n                                NoYes::no);\n            //Product receipt\n            createPO.proceed(purchTable.PurchId, purchLine.ItemId,purchLine.InventDimId,purchLine.PurchQty,strFmt("RptNum_%1", purchTable.PurchId));\n            //Post PO\n            createPO.postPOInvoice(purchTable.PurchId, strFmt("RptNum_%1", purchTable.PurchId));\n\n            info(strFmt("Purchase order \'%1\' has been created", purchTable.PurchId));\n            ttsCommit;\n            i++;\n        }\n    }\n\n    public boolean proceed(PurchId _purchId, ItemId _itemId,inventDimId _inventDimId, PurchQty _qty, PackingSlipId _productReceiptNumber)\n    {\n        return\n            this.generateProductReceipt(_purchId, this.addToPurchLineList(_purchId, _itemId, _inventDimId, _qty), _productReceiptNumber);\n    }\n\n    public boolean generateProductReceipt(PurchId _purchId, List _purchLineList, PackingSlipId _productReceiptNumber)\n    {\n        boolean ret = true;\n        PurchFormLetter purchFromLetter;\n        PurchTable purchTable = PurchTable::find(_purchId);\n\n        try\n        {\n            ttsbegin;\n            purchFromLetter = PurchFormLetter::construct(DocumentStatus::PackingSlip);\n            purchFromLetter.createFromLines(true);\n            purchFromLetter.parmLineList(_purchLineList.pack());\n            purchFromLetter.update(purchTable, _productReceiptNumber,\n                                DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),\n                                PurchUpdate::All);\n            ttscommit;\n        }\n        catch\n        {\n            ret = false;\n        }\n        return ret;\n    }\n\n    public List addToPurchLineList(PurchId _purchId, ItemId _itemId,inventDimId _inventDimId, PurchQty _qty)\n    {\n        List purchLineList = new List(Types::Record);\n        PurchLine purchLine = PurchLine::findItemIdInventDimId(_purchId, _itemId, _inventDimId);\n\n        if(purchLine && _qty > 0)\n        {\n            purchLine.PurchReceivedNow = _qty;\n            purchline.modifiedField(fieldNum(PurchLine, PurchReceivedNow));\n            purchLineList.addEnd(purchLine);\n        }\n        return purchLineList;\n    }\n\n    public void postPOInvoice(PurchId purchId, PackingSlipId packingSlipId)\n    {\n        TmpFrmVirtual               tmpFrmVirtualVend;\n        PurchFormLetter_Invoice     purchFormLetter;\n        VendPackingSlipJour         vendPackingSlipJour;\n        SysQueryRun                 chooseLinesQuery;\n        SysQueryRun                 chooseLinesPendingInvoiceQuery;\n        container                   conTmpFrmVirtual;\n        List                        selectedList    = new List(Types::Record);\n\n        select firstonly vendPackingSlipJour\n                    where vendPackingSlipJour.PurchId == purchId\n            && vendPackingSlipJour.PackingSlipId == packingSlipId;\n\n        if (vendPackingSlipJour)\n        {\n            tmpFrmVirtualVend.clear();\n            tmpFrmVirtualVend.TableNum  = vendPackingSlipJour.TableId;\n            tmpFrmVirtualVend.RecordNo  = vendPackingSlipJour.RecId;\n            tmpFrmVirtualVend.NoYes     = NoYes::Yes;\n            tmpFrmVirtualVend.Id        = vendPackingSlipJour.PurchId;\n            tmpFrmVirtualVend.insert();\n        }\n\n        chooseLinesQuery = new SysQueryRun(queryStr(PurchUpdate));\n        chooseLinesQuery.query().addDataSource(tableNum(VendInvoiceInfoTable)).enabled(false);\n\n        // chooseLinesPendingInvoiceQuery needs to be initialized, although it will not be used\n        chooseLinesPendingInvoiceQuery = new SysQueryRun(queryStr(PurchUpdatePendingInvoice));\n        chooseLinesPendingInvoiceQuery.query().dataSourceTable(tableNum(PurchTable)).addRange(fieldNum(PurchTable,PurchId)).value(queryValue(\'\'));\n           \n        purchFormLetter = PurchFormLetter::construct(DocumentStatus::Invoice);\n        purchFormLetter.chooseLinesQuery (chooseLinesQuery);\n        purchFormLetter.parmQueryChooseLinesPendingInvoice(chooseLinesPendingInvoiceQuery);\n        purchFormLetter.purchTable (PurchTable::find(PurchId));\n        purchFormLetter.transDate (systemDateGet());\n        purchFormLetter.parmParmTableNum (strFmt("%1",packingSlipId)); //This is invoice number\n        purchFormLetter.printFormLetter (NoYes::No);\n        purchFormLetter.sumBy (AccountOrder::Auto);\n        purchFormLetter.specQty (PurchUpdate::PackingSlip);\n      \n        while select tmpFrmVirtualVend\n        {\n            selectedList.addEnd(tmpFrmVirtualVend);\n            conTmpFrmVirtual = selectedList.pack();\n        }\n        purchFormLetter.selectFromJournal(conTmpFrmVirtual);\n        purchFormLetter.reArrangeNow(true);\n        purchFormLetter.run();\n    }\n\n    public int randomAmount()\n    {\n        RandomGenerate randomGenerate;\n        randomGenerate = RandomGenerate::construct();\n        randomGenerate.parmSeed(new Random().nextInt());\n        return RandomGenerate.randomInt(100, 800);\n    }\n\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Thank you for reading."})]})}function s(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>u,x:()=>a});var t=r(96540);const i={},c=t.createContext(i);function u(e){const n=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:u(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);