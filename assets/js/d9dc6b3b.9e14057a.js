"use strict";(self.webpackChunknuxulutest=self.webpackChunknuxulutest||[]).push([[7522],{52910:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>m});var r=t(74848),i=t(28453);const a={title:"Useful functions to use in AX 2012",description:"Useful functions to use in AX 2012",date:new Date("2016-12-30T00:00:00.000Z"),categories:["AX2012"],tags:["xpp"],toc:{enable:!1,auto:!1}},s=void 0,l={id:"development/xpp-sample/2016-12-30-useful-functions-to-use-in-ax-2012/index",title:"Useful functions to use in AX 2012",description:"Useful functions to use in AX 2012",source:"@site/docs/03-development/01-xpp-sample/2016-12-30-useful-functions-to-use-in-ax-2012/index.md",sourceDirName:"03-development/01-xpp-sample/2016-12-30-useful-functions-to-use-in-ax-2012",slug:"/development/xpp-sample/2016-12-30-useful-functions-to-use-in-ax-2012/",permalink:"/docs/development/xpp-sample/2016-12-30-useful-functions-to-use-in-ax-2012/",draft:!1,unlisted:!1,tags:[{inline:!0,label:"xpp",permalink:"/docs/tags/xpp"}],version:"current",lastUpdatedBy:"Luan Nguyen",lastUpdatedAt:1701636614e3,frontMatter:{title:"Useful functions to use in AX 2012",description:"Useful functions to use in AX 2012",date:"2016-12-30T00:00:00.000Z",categories:["AX2012"],tags:["xpp"],toc:{enable:!1,auto:!1}},sidebar:"tutorialSidebar",previous:{title:"Posting cust payment journal using X++ Dynamics AX 2012",permalink:"/docs/development/xpp-sample/2016-12-26-posting-cust-payment-journal-using-x++/"},next:{title:"Difference between QueryFilter and QueryBuildRrange",permalink:"/docs/development/xpp-sample/2017-01-01-Difference-between-QUERYFILTER-and-QUERYBUILDRANGE/"}},o={},m=[];function d(e){const n={code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Useful functions to use in AX 2012"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-C#",children:"public static container list2Con (List _list)\n{\n    container con;\n    ListEnumerator listEnum;\n\n    listEnum = _list.getEnumerator();\n\n    while (listEnum.moveNext())\n    {\n        con += listEnum.current();\n    }\n\n    return con;\n}\n\n///Creates a file named _file with the content specified in _content parameter.\n//See the class SysImportUtil class for file related functions like get temfolder,tempfilename..etc.\npublic static void createFile(str _file, str _content)\n{\n    #File\n    TextIo file = null;\n    ;\n    new FileIOPermission(_file, #io_write).assert();\n\n    // BP Deviation Documented\n    file = new TextIo(_file, #io_write);\n    file.write(_content);\n    file.finalize();\n}\n\n///Creates an XML file named _file with the content specified in _content parameter. If the XML file\n///can't be created then it will try to create a normal file by calling createFile method.\npublic static void createXmlFile(str _file, str _content)\n{\n    #File\n\n    XmlDocument document = null;\n    ;\n    try\n    {\n        document = XmlDocument::newXml(_content, false);\n\n        new FileIOPermission(_file, #io_write).assert();\n        // BP Deviation Documented\n        document.save(_file);\n    }\n    catch\n    {\n        SysImportUtil::createFile(_file, _content);\n    }\n}\n\n///Reads an XML file specified by _file parameter.\npublic static str readXmlFile(str _file)\n{\n    #File\n\n    XmlDocument file = null;\n    ;\n    try\n    {\n        new FileIOPermission(_file, #io_read).assert();\n        // BP Deviation Documented\n        file = XmlDocument::newFile(_file);\n        return file.xml();\n    }\n    catch\n    {\n        return '';\n    }\n}\n\n/// <summary>\n/// Opens Bing maps with the address.\n/// </summary>\n/// <param name=\"_address\">\n/// The address to map.\n/// </param>\npublic static void mapIt(LogisticsPostalAddress _address)\n{\n    #DEFINE.MapURL('http://maps.bing.com/default.aspx?where1=\\%1')\n    #DEFINE.comma(',')\n    #DEFINE.newLine('\\n')\n\n    str     address;\n    ;\n    if (_address)\n    {\n        address = _address.Street + #comma +\n                  _address.City + #comma +\n                  _address.State + #comma +\n                  _address.ZipCode + #comma +\n                  _address.CountryRegionId;\n\n        // Replace the newline with comma\n        address = strReplace(address, #newline, #comma);\n        // URL encode\n        address = System.Web.HttpUtility::UrlEncode(address);\n        // Add the address to the URL\n        infolog.urlLookup(strFmt(#MapURL, address));\n    }\n}\n\n\n\n/// <summary>\n/// Function to get the list of Tables in AOT\n/// </summary>\n/// <returns>\n/// In case the table is derived its parent i.e. base table is appended to it delimited by comma (,)\n/// Output example\n/// :Table1,Table1's Base Table : Table2 : Table3 : Table4 , Table4's Base Table\n/// </returns>\nstatic str getAOTTables()\n{\n    TreeNode            node;\n    TreeNode            childNode;\n    TreeNodeIterator    nodeIt;\n    FilePath            path;\n    TableId             tableId;\n    Dictionary      dict = new Dictionary();\n    str parentName;\n    str fieldArr;\n\n    path        = @'\\Data dictionary\\Tables';\n    node        = TreeNode::findNode(path);\n    nodeIt      = node.AOTiterator();\n    childNode   = nodeIt.next();\n    fieldArr ='';\n    while(childNode)\n    {\n        tableId = tableName2id(childNode.treeNodeName());\n\n        if ( !dict.tableObject(tableId).isTmp()  && !dict.tableObject(tableId).isMap() && !dict.tableObject(tableId).isView())\n        {\n            parentName = RetailUtils::getAOTTableParentName(tableId);\n            if (parentName)\n            {\n                //Creating formated output , refer explaination and example on header\n                fieldArr = fieldArr + ':' + strUpr(childNode.treeNodeName()) + \",\" + strUpr(parentName);\n            }\n            else\n            {\n                fieldArr = fieldArr + ':' + strUpr(childNode.treeNodeName());\n            }\n        }\n        childNode = nodeIt.next();\n    }\n    return fieldArr;\n}\n\n\n/// <summary>\n/// This method receives a table id and find the corresponding Base Table from AOT\n/// This method takes care of Multilevel inheritence\n/// </summary>\n/// <param name=\"tableid\">\n/// tableid of derived table.\n/// </param>\n/// <returns>\n/// Name of parent table.\n/// </returns>\nstatic str getAOTTableParentName(TableId tableid)\n{\n    Dictionary  dict = new Dictionary();\n    TableId parentId, temp;\n    str result;\n\n    parentId = dict.tableObject(tableid).extends();\n\n    // Loop until reached to the table for whcih Extends property is not defined\n    while (parentId)\n    {\n        temp = dict.tableObject(parentId).extends();\n        if (temp)\n        {\n            parentId = temp;\n        }\n        else\n        {\n            break;\n        }\n    }\n\n    if (parentId)\n    {\n        result = tableId2name(parentId);\n    }\n    else\n    {\n        result = '';\n    }\n    return result;\n}\n\n\n/// <summary>\n/// Function to accepts a table name and returns all its field\n/// </summary>\n/// <param name=\"tableName\">\n/// Table name for which field are to be retreived.\n/// </param>\n/// <returns>\n/// Field are arranged in a : delimited string and passed back\n/// Fields are read from AOT structure and defaults field are manually added\n/// as those are not present in the tree structure\n/// Example =  :Field1:Field2:Field3:Field4\n/// </returns>\nstatic str getAOTTableFields(str tableName)\n{\n    TreeNode            node;\n    TreeNode            childNode;\n    TreeNodeIterator    nodeIt;\n    FilePath            path;\n    TableId             tableId;\n    str fieldArr;\n    Dictionary      dict = new Dictionary();\n    fieldArr = '';\n\n    if (!tableName)\n    {\n        return fieldArr;\n    }\n\n    // Construct the path till table fields node\n    path        = @'\\Data dictionary\\Tables\\\\' + tableName + '\\\\Fields' ;\n    node        = TreeNode::findNode(path);\n    nodeIt      = node.AOTiterator();\n    childNode   = nodeIt.next();\n\n    while(childNode)\n    {\n        fieldArr =  fieldArr + ':' + strUpr(childNode.treeNodeName());\n        childNode = nodeIt.next();\n    }\n\n    tableId = tableName2id(tableName);\n    if (dict.tableObject(tableId).dataPrCompany())\n    {\n        //Append the default Fields\n        fieldArr =  fieldArr + ':' + 'DATAAREAID';\n    }\n\n    if (dict.tableObject(tableId).dataPerPartition())\n    {\n        fieldArr =  fieldArr + ':' + 'PARTITION';\n    }\n\n    return fieldArr;\n}\n\n\n\n\n// get enum values to container\nstatic void Enum2container(Args _args)\n{\n   \n    int         i = 0;\n    DictEnum    dimCode;\n    container   ret;\n    ;\n\n    dimCode = new DictEnum(enumnum(SysDimension));\n    while(i < dimCode.values())\n    {\n        ret += dimCode.index2Name(i);\n        i++;\n    }\n    info(strfmt(\"%1\",con2Str(ret)));\n}\n\npublic static boolean checkDateIsInPeriod(TransDate _transDate,\n                                            PeriodCode  _periodCode = PeriodCode::Regular)\n{\n    return BudgetTransactionManager::validateTransactionDate(_transDate);\n}\n\n\n// New method for returning ledgerperiod last date\nstatic transDate findLastOpenPeriod(transdate _ledgerTransDate)\n{\n    FiscalCalendarRecId     fiscalCalendarRecId;\n\n    fiscalCalendarRecId = Ledger::fiscalCalendar(CompanyInfo::find().RecId);\n    return FiscalCalendars::findLastDayofPeriod( fiscalCalendarRecId, _ledgerTransDate);\n}\n\n// New method for returning first open ledgerperiod first date\nstatic transDate findFirstOpenPeriod(transdate _ledgerTransDate)\n{\n    FiscalCalendarRecId     fiscalCalendarRecId;\n\n    fiscalCalendarRecId = Ledger::fiscalCalendar(CompanyInfo::find().RecId);\n    return FiscalCalendars::findFirstDayofPeriod( fiscalCalendarRecId, _ledgerTransDate);\n\n}\n\n\n//Calculate Hash for the string.\npublic static str CalculateHash(str tb)\n{\n\n    str s;\n    ClrObject obj;\n    ClrObject md5;\n    System.Text.StringBuilder sBuilder;\n    ClrObject clrStr;\n    ClrObject clrStrObject;\n    System.Exception clrException;\n    System.Array resultByteArray;\n    int i;\n    int arrayLength ;\n    InteropPermission perm;\n\n    perm = new InteropPermission(InteropKind::ClrInterop);\n    perm.assert();\n    try\n    {\n        obj = System.Text.Encoding::get_ASCII().GetBytes(tb);\n        md5 = System.Security.Cryptography.MD5::Create();\n        resultByteArray = md5.ComputeHash(obj);\n        //BP deviation documented\n        sBuilder = new System.Text.StringBuilder();\n        arrayLength = resultByteArray.get_Length() ;\n        // Loop through each byte of the hashed data\n        // and format each one as a hexadecimal string.\n        for (i = 0; i <arrayLength; i++)\n        {\n            clrStrObject = resultByteArray.GetValue(i);\n            clrStr = clrStrObject.ToString('x2');\n            sBuilder.Append(clrStr);\n        }\n\n        // Return the hexadecimal string.\n        s = sBuilder.ToString();\n    }\n    catch (Exception::CLRError)\n    {\n        //BP deviation documented\n        clrException = CLRInterop::getLastException();\n        s = clrException.get_Message();\n        error(s);\n        throw error(\"@SYS106158\");\n    }\n\n    CodeAccessPermission::revertAssert();\n    return s;\n\n}\n\n\n//Transforms xml to another format of xml using xslt.\npublic static str transform(str aifXml, str xsltResourceName)\n{\n    #define.XsltArgumentList(\"System.Xml.Xsl.XsltArgumentList\")\n    #AOT\n\n    ResourceNode resourceNode;\n    TreeNode resourcesNode;\n    container data;\n    str xsltString;\n    str doXml;\n\n    System.Xml.Xsl.XslCompiledTransform transform;\n    System.Text.StringBuilder           stringBuilder;\n    System.IO.StringWriter              stringWriter;\n    System.IO.StringReader              stringReader;\n    System.Xml.XmlTextReader            xmlTextReader;\n    System.IO.StringReader              stringReaderForXslt;\n    System.Xml.XmlTextReader            xmlTextReaderForXslt;\n    System.Xml.Xsl.XsltArgumentList     xsltArguments;\n    System.IDisposable                  disposableObj;\n\n    ;\n    // Get the top Resource node in the AOT\n    resourcesNode = infolog.findNode(#ResourcesPath);\n\n    if (resourcesNode)\n    {\n        // Get the XML string holding the data from the resource item\n        resourceNode = resourcesNode.AOTfindChild(xsltResourceName);\n        if (resourceNode)\n        {\n            resourceNode.AOTload();\n            data = SysResource::getResourceNodeData(resourceNode);\n            xsltString = conpeek(data, 1);\n\n        }\n    }\n    try\n    {\n        //Local XSLT\n        transform = new System.Xml.Xsl.XslCompiledTransform();\n        stringReaderForXslt = new System.IO.StringReader(xsltString);\n        xmlTextReaderForXslt = new System.Xml.XmlTextReader(stringReaderForXslt);\n        transform.Load(xmlTextReaderForXslt);\n\n        //Transform the input AIF XML\n        stringReader = new System.IO.StringReader(aifXml);\n        xmlTextReader = new System.Xml.XmlTextReader(stringReader);\n        stringBuilder = new System.Text.StringBuilder();\n        stringWriter = new System.IO.StringWriter(stringBuilder);\n\n        xsltArguments = ClrInterop::Null(#XsltArgumentList);\n\n        transform.Transform(xmlTextReader, xsltArguments, stringWriter);\n\n        doXml = stringBuilder.ToString();\n    }\n    catch (Exception::CLRError)\n    {\n        throw Global::error(ClrInterop::getLastException().toString());\n    }\n\n    if (!ClrInterop::isNull(xmlTextReaderForXslt))\n    {\n        disposableObj = xmlTextReaderForXslt;\n        disposableObj.Dispose();\n    }\n\n    if (!ClrInterop::isNull(stringReaderForXslt))\n    {\n        disposableObj = stringReaderForXslt;\n        disposableObj.Dispose();\n    }\n\n    if (!ClrInterop::isNull(xmlTextReader))\n    {\n        disposableObj = xmlTextReader;\n        disposableObj.Dispose();\n    }\n\n    if (!ClrInterop::isNull(stringReader))\n    {\n        disposableObj = stringReader;\n        disposableObj.Dispose();\n    }\n\n    if (!ClrInterop::isNull(stringWriter))\n    {\n        disposableObj = stringWriter;\n        disposableObj.Dispose();\n    }\n\n    return doXml;\n}\n\n\n\n\n//Converts from string to Time.\nstatic int str2Time(str 8 _timeStr)\n{\n    int     time;\n    ;\n\n    time += str2int(substr(_timeStr,0,2)) * 3600;\n    time += str2int(substr(_timeStr,4,2)) * 60;\n    time += str2int(substr(_timeStr,7,2));\n\n    return time;\n}\n\n//This function is used to get xml string from xml file.\nstatic public str getXMLstringFromFile(str _filepath)\n{\n    str xmlstring='';\n    XmlDocument document=new XmlDocument();\n    document.load(_filepath);\n    xmlstring=document.innerXml();\n    return xmlstring;\n}\n\n// this function is used to convert string to array.\npublic static Array str2array(str _inputString, str _delimiter = '\",\"')\n{\n    List            list        = AmcBankFunctions::strSplit(_inputString, _delimiter);\n    ListEnumerator  enumerator  = list.getEnumerator();\n\n    Array           a           = new Array(Types::String);\n    int             i           = 1;\n    str             tmpString;\n    ;\n\n    if (strLen(_inputString) == 0 || strScan(_inputString, _delimiter, 1, strLen(_inputString)) == 0)\n        return a; // this is not a XTL record\n    enumerator.reset();\n    while (enumerator.moveNext())\n    {\n        tmpString = enumerator.current();\n\n        // Removes first substring's preceding \" and last substring's succeeding \"\n        if (strLen(tmpString) > 0)\n        {\n            if (i == 1 && tmpString)\n                tmpString = subStr(tmpString, 2, strLen(tmpString));\n            if (i == list.elements())\n                tmpString = subStr(tmpString, 1, strLen(tmpString)-1);\n        }\n\n        a.value(i, tmpString);\n        i++;\n    }\n\n    return a;\n}\n\n\n/// <summary>\n///     Prefixes a string with a parameter provided character\n/// </summary>\n/// <param name=\"inputString\">\n///     The integer that is to be converted into a string\n/// </param>\n/// <param name=\"outputStringLength\">\n///     The length of the final string being returned\n/// </param>\n/// <param name=\"prefixWithChar\">\n///     The character which to prefix the output string with\n/// </param>\n/// <returns>\n///     The converted integer as a string with the parameter provided length (possible prefixed with provided\n\nchar)\n/// </returns>\npublic static str prefixString(str inputString, int outputStringLength, str 1 prefixWithChar)\n{\n    str outputString = inputString;\n\n    if (prefixWithChar == '')\n        return outputString;\n\n    while (strLen(outputString) < outputStringLength)\n    {\n        outputString = prefixWithChar + outputString;\n    }\n\n    return outputString;\n}\n\n\n// to test that we have access right for the the file or folder.\npublic static client IO_Status writeFileAndClose(Filename filename)\n{\n    TextIo textIo;\n    ;\n\n    new FileIOPermission(filename,'rw').assert();\n\n    textIo = new TextIo(filename,'w');\n\n    if (textIo!=null)\n        textIo.write('This is a test file for checking the access rights');\n\n    CodeAccessPermission::revertAssert();\n\n    if (textIo!=null)\n        return textIo.status();\n\n    return IO_Status::WriteError;\n}\n\n\n// send email using smtp\n//Please change the parameters accordingly for your client\npublic static boolean emailSmtpSend(str         _receiver,\n                                    str         _subject,\n                                    str         _body,\n                                    Filename    _attachment = '')\n{\n    AmcBankParameters                       amcBankParameters;\n\n    System.Net.Mail.Attachment              attachment;\n    System.Net.Mail.AttachmentCollection    attachmentCollection;\n    System.Net.Mail.MailAddress             mailFrom;\n    System.Net.Mail.MailAddress             mailTo;\n    System.Net.Mail.MailMessage             mailMessage;\n    System.Net.Mail.SmtpClient              smtpClient;\n    ;\n\n    if (!_receiver)\n        return checkFailed(\"@ABA32081\");\n\n    amcBankParameters = AmcBankParameters::find();\n\n    try\n    {\n        mailFrom    = new System.Net.Mail.MailAddress(amcBankParameters.SmtpSenderAddress);\n        mailTo      = new System.Net.Mail.MailAddress(_receiver);\n        mailMessage = new System.Net.Mail.MailMessage(mailFrom, mailTo);\n        mailmessage.set_Subject(_subject);\n        mailmessage.set_Body(_body);\n\n        // Adding attachment\n        if (_attachment)\n        {\n            attachment = new System.Net.Mail.Attachment(_attachment);\n            attachmentCollection = mailMessage.get_Attachments();\n            attachmentCollection.Add(attachment);\n        }\n\n        smtpClient = new System.Net.Mail.SmtpClient(amcBankParameters.SmtpServerName,\n\namcBankParameters.SmtpPortNumber);\n        smtpClient.Send(mailmessage);\n\n        info(strFmt(\"@SYS80635\", _receiver));\n\n        attachmentCollection.Dispose(); // Releases attachement resources (files)\n\n    }\n    catch (Exception::CLRError)\n    {\n        // If a CLR exception occurs it is important that the exceptions is shown (which it is not per default)\n        error(CLRInterop::getLastException());\n        attachmentCollection.Dispose(); // Releases attachement resources (files)\n\n        return checkFailed(strFmt(\"@ABA32082\",  _receiver));\n    }\n    catch\n    {\n        attachmentCollection.Dispose(); // Releases attachement resources (files)\n\n        return checkFailed(strFmt(\"@ABA32082\",  _receiver));\n    }\n\n    return true;\n}\n\n\n// archive the files.\npublic static void fileArchive(Filename _file, FilePath _archivePath)\n{\n    Filename            filenameArchive;\n\n    InteropPermission   interopPermission = new InteropPermission(InteropKind::ClrInterop);\n    Set                 interopPermissionSet = new Set(Types::Class);\n    ;\n    if (!_archivePath)\n        return;\n\n    // Granting file permission rights\n    interopPermissionSet.add(interopPermission);\n    CodeAccessPermission::assertMultiple(interopPermissionSet);\n\n    filenameArchive = _archivePath + AmcBankFile::getFileNameAndExtension(_file);\n\n    System.IO.File::Delete(filenameArchive);\n    System.IO.File::Move(_file, filenameArchive);\n\n    // Reverting file permission rights\n    CodeAccessPermission::revertAssert();\n}\n\n// getting the filename and extesion in container.\npublic static Filename getFileNameAndExtension(Filename _filename)\n{\n    ;\n    if (!_filename)\n        return '';\n\n    return strFmt('%1%2', conPeek(Global::fileNameSplit(_filename), 2),     // Filename\n                          conPeek(Global::fileNameSplit(_filename), 3));    // File extension (including\n\nprefixed dot (.))\n}\n\n//FolderExists\npublic static boolean folderExists(FilePath _directory)\n{\n    boolean             dirExists;\n\n    InteropPermission   interopPermission = new InteropPermission(InteropKind::ClrInterop);\n    Set                 interopPermissionSet = new Set(Types::Class);\n    ;\n\n    // Granting file permission rights\n    interopPermissionSet.add(interopPermission);\n    CodeAccessPermission::assertMultiple(interopPermissionSet);\n\n    dirExists = System.IO.Directory::Exists(_directory);\n\n    // Reverting file permission rights\n    CodeAccessPermission::revertAssert();\n\n    return dirExists;\n}\n\n\n/// <summary>\n///  internal use only.\n/// </summary>\n/// <param name=\"text\">\n/// A String value.\n/// </param>\n/// <returns>\n/// A String value.\n/// </returns>\nprivate str trimLeadingTabs(str text)\n{\n    int len = strlen(text);\n    int start = 1;\n\n    while ((start <= len) && (substr(text, start, 1) == '\\t'))\n        start++;\n\n    text = substr(text, start, len - start + 1);\n\n    return text;\n}\n\n\n/// <summary>\n///  internal use only.\n/// </summary>\n/// <returns>\n/// A String value.\n/// </returns>\npublic static str getClrErrorMessage()\n{\n    #File\n    str exceptionMessage;\n    System.Exception exObject, innerException;\n    ;\n\n    new InteropPermission(InteropKind::ClrInterop).assert();\n\n    // BP deviation documented\n    exObject = CLRInterop::getLastException();\n    if(exObject)\n    {\n        // We will ignore the first message since it is always a fixed message of\n        // \"Exception has been thrown from target of invocation\", this is from the reflection API being used\n        // \"ClrObject could not be created.\" - This is also of no use in most cases\n        innerException = exObject.get_InnerException();\n        while(innerException)\n        {\n            // BP deviation documented\n            exceptionMessage = exceptionMessage + #delimiterSpace + CLRInterop::getAnyTypeForObject\n\n(innerException.get_Message());\n            innerException = innerException.get_InnerException();\n        }\n    }\n\n    CodeAccessPermission::revertAssert();\n\n    return exceptionMessage;\n\n}\n\n//Parse date from string\npublic static date parseDate(str dateText)\n{\n    str dateTimeText;\n    ClrObject dateTimeObject;\n    utcdatetime dateTimeValue;\n    date dateValue;\n\n\n    dateTimeText = strFmt('%1T00:00:00Z', dateText);\n\n    // BP Deviation Documented\n    dateTimeObject = Microsoft.Dynamics.IntegrationFramework.Util::ParseXmlDateTime(dateTimeText, false);\n\n    // If the returned object is null, then deserialization failed\n    if (CLRInterop::isNull(dateTimeObject))\n    {\n        throw error(strfmt(\"@SYS112380\", dateText, enum2str(Types::Date)));\n    }\n\n    dateTimeValue = CLRInterop::getAnyTypeForObject(dateTimeObject);\n\n    // If the utcdatetime value is null, then the value is outside the valid range\n    // unless the input was a null datetime\n    if (dateTimeValue == utcDateTimeNull() && !AifUtil::isNullDateTime(dateTimeObject))\n    {\n        throw error(strfmt(\"@SYS112380\", dateText, enum2str(Types::Date)));\n    }\n\n    dateValue = DateTimeUtil::date(dateTimeValue);\n\n    return dateValue;\n}\n\n//Parse DateTime from string\npublic static utcdatetime parseDateTime(str dateTimeText, System.DateTimeKind expectedDateTimeKind)\n{\n    ClrObject dateTimeObject;\n    utcdatetime dateTimeValue;\n    System.DateTime systemDateTimeValue;\n\n    // BP Deviation Documented\n    dateTimeObject = Microsoft.Dynamics.IntegrationFramework.Util::ParseXmlDateTime(dateTimeText, false);\n\n    // If the returned object is null, then deserialization failed\n    if (CLRInterop::isNull(dateTimeObject))\n    {\n        throw error(strfmt(\"@SYS112380\", dateTimeText, enum2str(Types::UtcDateTime)));\n    }\n\n    dateTimeValue = CLRInterop::getAnyTypeForObject(dateTimeObject);\n\n    // If the utcdatetime value is null, then the value is outside the valid range\n    // unless the input was a null datetime\n    if (dateTimeValue == utcDateTimeNull() && !AifUtil::isNullDateTime(dateTimeObject))\n    {\n        throw error(strfmt(\"@SYS112380\", dateTimeText, enum2str(Types::UtcDateTime)));\n    }\n\n    // If the value is of unexpected kind, throw an error.\n    systemDateTimeValue = dateTimeObject;\n    if (systemDateTimeValue.get_Kind() != expectedDateTimeKind)\n    {\n        throw error(strfmt(\"@SYS112380\", dateTimeText, enum2str(Types::UtcDateTime)));\n    }\n\n    return dateTimeValue;\n}\n\n// get the sequence number for the dateformat.\npublic static int getSequenceForDateFormat( DateFormat _dateFormat)\n{\n    ;\n\n    switch (_dateFormat)\n    {\n        case DateFormat::YMD:\n            return 321;\n        case DateFormat::DMY:\n            return 123;\n        case DateFormat::DYM:\n            return 132;\n        case DateFormat::MDY:\n            return 213;\n        case DateFormat::MYD:\n            return 231;\n        case DateFormat::YDM:\n            return 312;\n        default:\n            return 123;\n    }\n}\n\n// returns time from str.\nstatic int str2Time(str 8 _timeStr)\n{\n    int     time;\n    ;\n\n    time += str2int(substr(_timeStr,0,2)) * 3600;\n    time += str2int(substr(_timeStr,4,2)) * 60;\n    time += str2int(substr(_timeStr,7,2));\n\n    return time;\n}\n\n// <CostCenter:Department> _dimaatributesString,\n// <1010:MBS> dimValueString\npublic static RecId generateDefaultDimension(Str                        _dimValueString,\n                                             str                        _dimaatributesString,\n                                             str                        _delimeter)\n{\n    container                           dimAttributeList,\n                                        dimValueList;\n    int                                 j;\n\n    RecId                               defDimRecId;\n    DimensionAttributeValueSetStorage   storage;\n\n    if (_dimaatributesString && _dimValueString)\n    {\n        dimAttributeList = str2con(_sourceProperties, _delimeter,false);\n        dimValueList     = str2con(_dimValueString, _delimeter,false);\n\n        if(!dimValueList)\n        {\n            throw error(strFmt(\"This dimvalue string was not available\"));\n        }\n\n        storage = new DimensionAttributeValueSetStorage();\n\n        for (j=1;j<=conLen(dimValueList);j++)\n        {\n            if(conPeek(dimValueList,j))\n            {\n                DMFDimensionHelper::dynamicDimensionCreation(dimAttributeList, dimValueList, j);\n\n                storage.addItem(DimensionAttributeValue::findByDimensionAttributeAndValue(DimensionAttribute::findByName(conPeek(dimAttributeList,j)), conPeek(dimValueList,j), false, true));\n            }\n        }\n\n        defDimRecId = storage.save();\n    }\n    return defDimRecId;\n\n}\n\n\n//Generate the Dimension String from default dimension\n// <CostCenter:Department> dimAttributeString\n// <1010:MBS> dimValueString\npublic static str generateDefaultDimensionStr(RefRecId  _defaultDimension,str _dimattrString,\n                                                  str _delimeter)\n{\n    DMFDefaultDimensionStr              defaultDimensionStr;\n    DimensionAttributeValueSetItem      setItem;\n    DimensionAttributeValue             dimAttrValue;\n    DimensionAttribute                  dimAttr;\n    container                           con;\n    Int                                 i;\n    DimensionValue                      displayValue;\n\n    con = str2con(_dimattrString,_delimeter,false);\n\n    if (_dimattrString && _defaultDimension)\n    {\n        for( i = 1; i <= conLen(con); i ++)\n        {\n            displayValue = conPeek(con,i);\n\n            select RecId, DisplayValue from setItem where setItem.DimensionAttributeValueSet == _defaultDimension\n                join RecId from dimAttrValue where\n                     dimAttrValue.RecId == setItem.DimensionAttributeValue &&\n                     dimAttrValue.IsDeleted == false\n                 join RecId from dimAttr\n                    where  dimAttr.RecId == dimAttrValue.DimensionAttribute\n                       &&  dimAttr.Name  == displayValue;\n\n                if (defaultDimensionStr)\n                {\n                    defaultDimensionStr += _delimeter;\n                }\n\n                defaultDimensionStr += setItem.DisplayValue;\n        }\n    }\n\n    return defaultDimensionStr;\n}\n\n\nstatic int strLineCount(str freeTxt)\n{\n    int  start  = 1;\n    int  end;\n    int  length;\n    int  lines  = 0;\n\n    length=strLen(freeTxt);\n\n    end = strScan(freeTxt, '\\n', start, length);\n\n    while (start)\n    {\n        lines+=1;\n        if (end)\n        {\n            start=end+1;\n            end = strScan(freeTxt, '\\n', start, length);\n        }\n        else\n            start=0;\n    }\n\n    if (!lines)\n        lines=1;\n\n    return lines;\n}\n\n\n/// <summary>\n/// Determines whether the specified string is a date time string.\n/// </summary>\n/// <param name=\"_value\">\n/// The string to check.\n/// </param>\n/// <returns>\n/// true if it is date time; otherwise, false.\n/// </returns>\n/// <remarks>\n/// Input can have a format like \"5/7/2010 12:00:00 AM\" or \"2010-05-07T00:00:00\u201d. Both cases will be\n/// handled.\n/// </remarks>\npublic static boolean isDateTimeStr(str _value)\n{\n    boolean isDateTime;\n    System.Text.RegularExpressions.Regex regex;\n    System.Text.RegularExpressions.Match regexMatch;\n    #define.MatchTimeRegex(@\"[\\sT]\\d{1,2}:\\d{1,2}:\\d{1,2}\")\n    #define.ISODateTimeIdentifier(\"T\")\n    #define.ZeroTime(\"00:00:00\")\n    #define.DefaultLCID(1033)\n\n    // check if in ISO format.\n    isDateTime = strFind(_value, #ISODateTimeIdentifier, 0, strLen(_value)) > 0;\n    if(!isDateTime)\n    {\n\n        // search for a time on the value\n        // BP deviation documented\n        regex = new System.Text.RegularExpressions.Regex(#MatchTimeRegex);\n\n        // BP deviation documented\n        regexMatch = regex.Match(_value);\n        isDateTime = regexMatch.get_Success();\n    }\n\n    return isDateTime;\n}\n\n\n//Swapping the key value from map\n/// <summary>\n/// Creates a <c>Map</c> class with the value and key swapped.\n/// </summary>\n/// <param name=\"_key2ValueMap\">\n/// Map that has the keys and values swapped.\n/// </param>\n/// <returns>\n/// A map that has the value switched with the keys.\n/// </returns>\npublic static Map getValue2KeyMap(Map _key2ValueMap)\n{\n    // reverses the valid values map. The original map contains <key, label>, we will create a <label, key>\n    Map value2KeyMap;\n    MapEnumerator mapEnum;\n\n    if(_key2ValueMap)\n    {\n        value2KeyMap = new Map(_key2ValueMap.valueType(), _key2ValueMap.keyType());\n        mapEnum = _key2ValueMap.getEnumerator();\n        while(mapEnum.moveNext())\n        {\n            value2KeyMap.insert(mapEnum.currentValue(), mapEnum.currentKey());\n        }\n    }\n\n    return value2KeyMap;\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c#",children:'//Show viewhistory on form datasources if you have ValidaTimeState Enabled DateTime enabled on the tables of that form. \n//create this method in Global class so you can call whereever you want in form button click as below.\n\nvoid clicked()\n\n{\n    buttonHistoryClick(element, this);\n    Super();\n}\n\nstatic public void buttonHistoryClick(FormRun _formRun, FormButtonControl _fbc)\n{\n    void changeDataSources(ValidTimeStateAutoQuery _from, ValidTimeStateAutoQuery _to, boolean _allowDelete)\n    {\n        Counter         dataSourceNo;\n        FormDataSource  formDataSource;\n\n        for (dataSourceNo=1;_formRun.dataSourceCount()>=dataSourceNo;dataSourceNo++)\n        {\n            formDataSource = _formRun.dataSource(dataSourceNo) as FormDataSource;\n            if (formDataSource.validTimeStateAutoQuery() == _from && new DictTable(formDataSource.table()).isValidTimeStateTable())\n            {\n                formDataSource.validTimeStateAutoQuery(_to);\n                switch (_to)\n                {\n                    case ValidTimeStateAutoQuery::AsOfDate:\n                        formDataSource.validTimeStateAutoQuery(ValidTimeStateAutoQuery::AsOfDate);\n                        formDataSource.query().resetValidTimeStateQueryType();\n                        formDataSource.allowDelete(_allowDelete);\n                        break;\n                    case ValidTimeStateAutoQuery::DateRange:\n                        formDataSource.validTimeStateAutoQuery(ValidTimeStateAutoQuery::DateRange);\n                        formDataSource.query().validTimeStateDateTimeRange(DateTimeUtil::minValue(), DateTimeUtil::maxValue());\n                        formDataSource.allowDelete(_allowDelete);\n                        break;\n                }\n                formDataSource.executeQuery();\n            }\n        }\n    }\n\n    if (_fbc.labelText() == "@SYS110266")\n    {\n        changeDataSources(ValidTimeStateAutoQuery::AsOfDate, ValidTimeStateAutoQuery::DateRange, false);\n        _fbc.text("Stoping History");\n        _fbc.normalImage("10006");\n    }\n    else\n    {\n        changeDataSources(ValidTimeStateAutoQuery::DateRange, ValidTimeStateAutoQuery::AsOfDate, true);\n        _fbc.Text("@SYS110266\n        _fbc.normalImage("10007");\n    }\n\n}\n// this method is used to create filenameTimeStamp.\n\nstatic FileName createFilenameTimeStamp()\n{\n    FileName    ret;\n    Microsoft.Dynamics.IntegrationFramework.Adapter.FileSystem       fileSystem;\n    #Aif\n\n    fileSystem      = AifUtil::getClrObject(#FileSystemProgId);\n\n    ret = fileSystem.GetCurrentTimestamp();\n\n    return ret;\n}\n\n\n// This method is used to split the string, and returns the conatiner with the position defined in the parameter\npublic static str rsaStrSplit(str _splitString,str _splitchar,int _pos)\n{\n    List strlist=new List(Types::String);\n    ListIterator    iterator;\n    container       packedList;\n    ;\n    strlist=strSplit(_splitString,_splitchar);\n    iterator = new ListIterator(strlist);\n    while(iterator.more())\n    {\n        packedList += iterator.value();\n        iterator.next();\n    }\n    return conPeek(packedList,_pos);\n\n}\n\npublic static str encrypt(str _input, str _salt = \'\')\n{\n    System.Security.Cryptography.SHA512Managed  sha512managed = new System.Security.Cryptography.SHA512Managed();\n    System.Text.Encoding                        encoding = System.Text.Encoding::get_UTF8();\n\n    System.Byte[]                               inputBytes;\n    System.Byte[]                               resultBytes;\n\n    int                                         i;\n    str                                         returnString;\n    ;\n\n    new InteropPermission(InteropKind::ClrInterop).assert();\n\n    inputBytes = encoding.GetBytes(strLwr(_salt) + _input); // Convert lower case salt + input into byte array\n\n    // The input is hashed 1024 times for attack resiliency\n    for (i = 0; i < 1024; i++)\n    {\n        resultBytes = resultBytes ? resultBytes : inputBytes; // First loop uses input for hashing\n        resultBytes = sha512managed.ComputeHash(resultBytes);\n    }\n\n    returnString = System.Convert::ToBase64String(resultBytes);\n\n    CodeAccessPermission::revertAssert();\n\n    return returnString;\n}\n\nprivate static Map fileGetList(FilePath            _filePathArchive)\n\n{\n  \n    Map                 mapFiles;\n\n    InteropPermission   interopPermission = new InteropPermission(InteropKind::ClrInterop);\n    Set                 interopPermissionSet = new Set(Types::Class);\n    System.Array        arrayFiles;\n\n    int                 i;\n    ;\n\n    // Granting file permission rights\n    interopPermissionSet.add(interopPermission);\n    CodeAccessPermission::assertMultiple(interopPermissionSet);\n\n    mapFiles = new Map(Types::String, Types::String); // Key = return file | Value = archive path\n\n        if (!System.IO.Directory::Exists(_filePathArchive))\n        {\n             throw  error("Path doesnt exist");\n        }\n\n        arrayFiles = System.IO.Directory::GetFiles(_filePathArchive);\n\n        // CLRInterop::getAnyTypeForObject method is used to handle difference in AX and System types (e.g. System.Int32 != int)\n\n        for (i = 0; i < CLRInterop::getAnyTypeForObject(arrayFiles.get_Length()); i++)\n        {\n       mapFiles.insert(CLRInterop::getAnyTypeForObject(arrayFiles.GetValue(i)), _filePathArchive);\n        }\n    }\n\n    // Reverting file permission rights\n    CodeAccessPermission::revertAssert();\n\n    return mapFiles;\n}\n\n\n/// <summary>\n///  Gets the SenderID from AIF xml .\n/// </summary>\n/// <param name="messagePartsXml">\n/// An <c>AifXml</c> value.\n/// </param>\n/// <returns>\n/// An instance of the <c>str document Namespace</c> class.\n/// </returns>\npublic static str getSenderIDValue(AifXml messagePartsXml)\n{\n     XmlTextReader               xmlReader;\n    str value,currentElement,pureElement;\n\n;\n#Aif\n    xmlReader = XmlTextReader::newXml(messagePartsXml);\n    while (xmlReader.Read())\n    {\n        switch (xmlReader.nodeType())\n        {\n             case XmlNodeType::Element:\n                  currentElement = xmlReader.name();\n                 break;\n             case XmlNodeType::Text:\n                  pureElement = subStr(currentElement,strFind(currentElement,\':\',1,256)+1,256);\n                    switch (pureElement)\n                    {\n                       case "SenderId":\n                        {\n                            value=xmlReader.value();\n                            return value;\n                        }\n                        break;\n                    }\n              break;\n        }\n    }\n\n    return value;\n}\n'})})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var r=t(96540);const i={},a=r.createContext(i);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);